#!/usr/bin/X11/expect -f
#################################################################
#								#
# Copyright (c) 2018 YottaDB LLC. and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################
# This module is derived from FIS GT.M.
#################################################################

#
# This Expect script was generated by autoexpect on Thu Nov 10 17:08:59 2011
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
;# script wasn't run conservatively originally
if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
    }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set timeout 10
match_max 100000
set send_slow {1 .1}
set GTM_SHORT_SLEEP .5
set GTM_LONG_SLEEP 1.5
set gtm_dist [lrange $argv 0 0]

spawn $gtm_dist/mumps -dir
expect "YDB>"
send -s -- "f i=1:1:10 s a(i)=i*2,b(i)=i\r"
sleep $GTM_LONG_SLEEP
expect "f i=1:1:10 s a(i)=i*2,b(i)=i"
send -- "\r"
sleep $GTM_LONG_SLEEP
expect "YDB>"
send -s -- "set \$zintr=\"zwr a m a=b\""
sleep $GTM_LONG_SLEEP
expect "set \$zintr=\"zwr a m a=b\""
send -s -- "\r"
sleep $GTM_LONG_SLEEP
expect "YDB>"
send -s -- "zsy \"mupip intr \"_\$j"
sleep $GTM_LONG_SLEEP
expect "zsy \"mupip intr \"_\$j"
send -s -- "\r"
sleep $GTM_LONG_SLEEP
expect  "INTRPT issued to process "
exp_pid
expect "YDB>%YDB-E-ZINTRECURSEIO, Attempt to do IO to the active device in \$ZINTERRUPT"
expect "%YDB-E-ERRWZINTR, Error while processing \$ZINTERRUPT"
send -s -- "\r"
sleep $GTM_LONG_SLEEP
expect  "YDB>"
send -s -- "h"
sleep $GTM_LONG_SLEEP
expect "h"
send -s -- "\r"
expect eof
