---------------------------------------------------------------------
######## Test various code issues identified by fuzz testing ########
---------------------------------------------------------------------

------------------------------------------------------------
# Test $CHAR(0) in vector portion of $ZTIMEOUT does not SIG-11
------------------------------------------------------------
%YDB-W-ZTIMEOUT, Time expired

------------------------------------------------------------
# Test LVUNDEF error is issued if $ZTIMEOUT is set to an undefined lvn
------------------------------------------------------------
%YDB-E-LVUNDEF, Undefined local variable: xyz

------------------------------------------------------------
# Test no memory leaks when invalid M code is specified in $ZTIMEOUT
------------------------------------------------------------
PASS : No memory leaks detected

------------------------------------------------------------
# Test $VIEW("YCOLLATE",coll,ver) does not SIG-11 if no collation library exists
------------------------------------------------------------
-1

------------------------------------------------------------
# Test NUMOFLOW operands in division operations do not cause %YDB-F-SIGINTDIV fatal errors
------------------------------------------------------------
PASS

------------------------------------------------------------
# Test retrying OPEN after INVMNEMCSPC error does not SIG-11
# Expect INVMNEMCSPC error followed by USRIOINIT error
------------------------------------------------------------

YDB>

YDB>
%YDB-E-INVMNEMCSPC, Unsupported mnemonicspace invalidmnemonicspace

YDB>
%YDB-E-USRIOINIT, User-defined device driver not successfully initialized

YDB>

------------------------------------------------------------
# Test $FNUMBER with a huge 3rd parameter does not cause a SIG-11 or assert failures
------------------------------------------------------------
PASS

------------------------------------------------------------
# Test $FNUMBER with a 3rd parameter >= 1Mb issues a MAXSTRLEN error
------------------------------------------------------------
# Trying length of 2**20 : Expect MAXSTRLEN error
%YDB-E-MAXSTRLEN, Maximum string length exceeded
# Trying length of 2**21 : Expect MAXSTRLEN error
%YDB-E-MAXSTRLEN, Maximum string length exceeded
# Trying length of 2**19 : Do not expect MAXSTRLEN error

------------------------------------------------------------
# Test $JUSTIFY and $FNUMBER with a huge 3rd parameter does not cause a SIG-11 or assert failures
------------------------------------------------------------
# Testing $FNUMBER with random huge 3rd argument
# Testing $JUSTIFY with random huge 3rd argument
# Testing $JUSTIFY with random huge 2nd and 3rd arguments
PASS

------------------------------------------------------------
# Test no stack buffer overflow in lower_to_upper() call in sr_unix/io_open_try.c
# Tests https://gitlab.com/YottaDB/DB/YDB/-/issues/828#note_793149685
# Expect to see a %YDB-E-INVMNEMCSPC error
------------------------------------------------------------
%YDB-E-INVMNEMCSPC, Unsupported mnemonicspace invalidmnemonicspace

------------------------------------------------------------
# Test no stack buffer overflow in lower_to_upper() call in sr_unix/op_fnzparse.c
# Tests https://gitlab.com/YottaDB/DB/YDB/-/issues/828#note_793151980
# Expect to see a %YDB-E-ZPARSETYPE error
------------------------------------------------------------
%YDB-E-ZPARSETYPE, Illegal TYPE argument to $ZPARSE(): abcdefghijklmnopqrstuvwxyz

------------------------------------------------------------
# Test no stack buffer overflow in lower_to_upper() call in sr_port/iosocket_open.c
# Tests https://gitlab.com/YottaDB/DB/YDB/-/issues/828#note_793151980
# Expect to see no errors
------------------------------------------------------------

YDB>

YDB>

YDB>

YDB>

------------------------------------------------------------
# Test $INCREMENT(@glvn) with boolean expression in glvn subscript does not SIG-11
# Expect to see 2 LVUNDEF errors in the first 2 tests. And y(2)=1 in the 3rd test.
------------------------------------------------------------
%YDB-E-LVUNDEF, Undefined local variable: x(1)
%YDB-E-LVUNDEF, Undefined local variable: y
y(2)=1

------------------------------------------------------------
# Test MUMPS_INT usages in code base with HUGE numeric arguments do not SIG-11 and/or assert fail
------------------------------------------------------------
# First test with XECUTE of such expressions
# Testing $EXTRACT/$ZEXTRACT with random huge 2nd and/or 3rd argument
# Testing $ZYHASH with random huge 2nd argument
# Testing $TEXT with random huge offset argument
# Testing $FIND with random huge 3rd argument
# Testing $ZBITFIND with random huge 2nd and/or 3rd argument
# Testing $ZBITSET with random huge 2nd and/or 3rd argument
# Testing $ZBITGET with random huge 2nd argument
# Testing $ZBITSTR with random huge 1st and/or 2nd argument
# Testing $ZCHAR with random huge 1st argument
# Testing $ZSIGPROC with random huge 2nd argument
# Testing $CHAR with random huge 1st argument
# Testing $JUSTIFY with random huge 2nd and/or 3rd argument
# Testing $ZGETJPI with random huge 1st argument
# Testing $RANDOM with random huge 1st argument
# Testing $ZMESSAGE with random huge 1st argument
# Testing $QSUBSCRIPT with random huge 2nd argument
# Testing $ASCII with random huge 2nd argument
# Testing $STACK with random huge 1st argument
# Testing $ZATRANSFORM with random huge 2nd, 3rd and/or 4th arguments
# Testing $ZCOLLATE with random huge 2nd and/or 3rd argument
# Testing $ZPEEK with random huge 2nd and/or 3rd argument
# Testing $ZSEARCH with random huge 2nd argument
# Testing $ZTRNLNM with random huge 3rd argument
# Testing $ZWRITE with random huge 2nd argument
# Testing $PIECE/$ZPIECE with random huge 3rd and/or 4th argument
# Testing READ ? with random huge argument
# Testing WRITE ? with random huge argument
# Testing DO label+offset with random huge offfset
# Testing ZBREAK label+offset with random huge offfset
# Testing READ # with random huge argument
# Testing WRITE * with random huge argument
# Testing SET $PIECE/$ZPIECE/$EXTRACT/$ZEXTRACT with random huge 3rd and/or 4th argument
# Testing TROLLBACK with random huge argument
# Testing ZBREAK label::BreakpointCount with random huge BreakpointCount
# Testing ZGOTO LEVEL with random huge LEVEL
# Testing ZHALT LEVEL with random huge LEVEL
# Testing ZMESSAGE with random huge 1st argument
# Testing ZTCOMMIT with random huge 1st argument
PASS
# Next test with compile of such expressions

------------------------------------------------------------
# Test NEW:0 or BREAK:0 followed by other commands in same M line does not SIG-11
------------------------------------------------------------
# Try all test cases using [yottadb -run]
------------------------------------------------------------
# test1 : NEW:0 : Expect LVUNDEF error
%YDB-E-LVUNDEF, Undefined local variable: i
		At M source location test1+2^ydb828newbreak
# test2 : NEW:0 : Expect LVUNDEF error
%YDB-E-LVUNDEF, Undefined local variable: i
		At M source location test2+2^ydb828newbreak

YDB>
# test3 : NEW:0 : Expect LVUNDEF error
%YDB-E-LVUNDEF, Undefined local variable: i
		At M source location test3+2^ydb828newbreak

YDB>
# test4 : NEW:0 : Expect LVUNDEF error
%YDB-E-LVUNDEF, Undefined local variable: i
		At M source location test4+2^ydb828newbreak

YDB>
# test5 : NEW:0 inside FOR loop : Expect LVUNDEF error
%YDB-E-LVUNDEF, Undefined local variable: x
		At M source location test5+2^ydb828newbreak

YDB>
# test6 : BREAK:0 : Expect LVUNDEF error
%YDB-E-LVUNDEF, Undefined local variable: y
		At M source location test6+2^ydb828newbreak

YDB>
# test7 : BREAK:0 inside FOR loop : Expect LVUNDEF error
%YDB-E-LVUNDEF, Undefined local variable: y
		At M source location test7+2^ydb828newbreak

YDB>
# test8 : NEW:0 : Expect 5 as output
5
# test9 : BREAK:0 : Expect 8 as output
8
# test10 : NEW:0 inside FOR loop : Expect 555 as output
555
# test11 : BREAK:0 inside FOR loop : Expect 888 as output
888
------------------------------------------------------------
# Try all test cases using [yottadb -direct]
------------------------------------------------------------

YDB>
# test1 : NEW:0 : Expect LVUNDEF error
YDB>
%YDB-E-LVUNDEF, Undefined local variable: i

YDB>
%YDB-E-LVUNDEF, Undefined local variable: i

YDB>
# test3 : NEW:0 : Expect LVUNDEF error
YDB>
%YDB-E-LVUNDEF, Undefined local variable: i

YDB>
# test4 : NEW:0 : Expect LVUNDEF error
YDB>
%YDB-E-LVUNDEF, Undefined local variable: i

YDB>
# test5 : NEW:0 inside FOR loop : Expect LVUNDEF error
YDB>
%YDB-E-LVUNDEF, Undefined local variable: x

YDB>
# test6 : BREAK:0 : Expect LVUNDEF error
YDB>
%YDB-E-LVUNDEF, Undefined local variable: y

YDB>
# test7 : BREAK:0 inside FOR loop : Expect LVUNDEF error
YDB>
%YDB-E-LVUNDEF, Undefined local variable: y

YDB>
# test8 : NEW:0 : Expect 5 as output

YDB>

YDB>
5
YDB>
# test9 : BREAK:0 : Expect 8 as output

YDB>

YDB>
8
YDB>
# test10 : NEW:0 inside FOR loop : Expect 555 as output

YDB>

YDB>
555
YDB>
# test11 : BREAK:0 inside FOR loop : Expect 888 as output

YDB>

YDB>
888
YDB>
