############################## FTOK SEMAPHORE TESTING ################################


CASE 1 : Testing gtm_db_startup_max_wait environment variable with value set to 0 - immediate exit
---------------------------------------------------------------------------------------------------------------------
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
---> Start a GT.M process and let it hold onto FTOK lock
---> Now that the process is holding onto the FTOK, start another process to cause FTOK contention
---> This should cause SEMWT2LONG error
----------
Error YDB-E-DBFILERR seen in ftokcontender_1.out as expected:
%YDB-E-DBFILERR, Error with database file ##TEST_PATH##/mumps.dat
----------
----------
Error YDB-E-SEMWT2LONG seen in ftokcontender_1.out as expected:
##TEST_AWK%YDB-E-SEMWT2LONG, Process [1-9][0-9]* waited 0 second.s. for the ftok lock for region ##TEST_PATH##/mumps.dat, lock held by pid [1-9][0-9]*
----------
##FILTERED##%GTM-I-MUJNLSTAT, Initial processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Backward processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Forward processing started at ... ... .. ..:..:.. 20..
%GTM-I-FILECREATE, Journal extract file ##TEST_PATH##/mumps.mjf created
%GTM-S-JNLSUCCESS, Extract successful
##FILTERED##%GTM-I-MUJNLSTAT, End processing at ... ... .. ..:..:.. 20..

##TEST_AWKCASE 2 : Testing gtm_db_startup_max_wait environment variable with value set to [1-9][0-9]* - wait for atmost [1-9][0-9]* seconds
---------------------------------------------------------------------------------------------------------------------
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
---> Start a GT.M process and let it hold onto FTOK lock
---> Now that the process is holding onto the FTOK, start another process to cause FTOK contention
---> This should cause SEMWT2LONG error
----------
Error YDB-E-DBFILERR seen in ftokcontender_2.out as expected:
%YDB-E-DBFILERR, Error with database file ##TEST_PATH##/mumps.dat
----------
----------
Error YDB-E-SEMWT2LONG seen in ftokcontender_2.out as expected:
##TEST_AWK%YDB-E-SEMWT2LONG, Process [1-9][0-9]* waited [1-9][0-9]* second.s. for the ftok lock for region ##TEST_PATH##/mumps.dat, lock held by pid [1-9][0-9]*
----------
##FILTERED##%GTM-I-MUJNLSTAT, Initial processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Backward processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Forward processing started at ... ... .. ..:..:.. 20..
%GTM-I-FILECREATE, Journal extract file ##TEST_PATH##/mumps.mjf created
%GTM-S-JNLSUCCESS, Extract successful
##FILTERED##%GTM-I-MUJNLSTAT, End processing at ... ... .. ..:..:.. 20..

CASE 3 : Testing gtm_db_startup_max_wait environment variable with value set to -1 - wait indefinitely
---------------------------------------------------------------------------------------------------------------------
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
---> Start a GT.M process and let it hold onto FTOK lock
---> Now that the process is holding onto the FTOK, start another process to cause FTOK contention
---> This is the indefinite wait case. The FTOK contender will get the semaphore eventually
##FILTERED##%GTM-I-MUJNLSTAT, Initial processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Backward processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Forward processing started at ... ... .. ..:..:.. 20..
%GTM-I-FILECREATE, Journal extract file ##TEST_PATH##/mumps.mjf created
%GTM-S-JNLSUCCESS, Extract successful
##FILTERED##%GTM-I-MUJNLSTAT, End processing at ... ... .. ..:..:.. 20..
##TEST_AWK\^ftokcontender="[1-9][0-9]*"


############################## FTOK SEMAPHORE TESTING ENDS ################################


############################## ACCESS CONTROL SEMAPHORE TESTING ################################


CASE 1 : Testing gtm_db_startup_max_wait environment variable with value set to 0 - immediate exit
---------------------------------------------------------------------------------------------------------------------
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
---> Start a MUPIP RECOVER process and let it hold onto access control lock
---> Now that the process is holding onto the ACCESS control lock, start another process to cause contention
---> This should cause SEMWT2LONG error
----------
Error YDB-E-DBFILERR seen in accsemcontender_1.out as expected:
%YDB-E-DBFILERR, Error with database file ##TEST_PATH##/mumps.dat
----------
----------
Error YDB-E-SEMWT2LONG seen in accsemcontender_1.out as expected:
##TEST_AWK%YDB-E-SEMWT2LONG, Process [1-9][0-9]* waited 0 second.s. for the access control lock for region ##TEST_PATH##/mumps.dat, lock held by pid [1-9][0-9]*
----------
##FILTERED##%GTM-I-MUJNLSTAT, Initial processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Backward processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Forward processing started at ... ... .. ..:..:.. 20..
%GTM-I-FILECREATE, Journal extract file ##TEST_PATH##/mumps.mjf created
%GTM-S-JNLSUCCESS, Extract successful
##FILTERED##%GTM-I-MUJNLSTAT, End processing at ... ... .. ..:..:.. 20..

##TEST_AWKCASE 2 : Testing gtm_db_startup_max_wait environment variable with value set to [1-9][0-9]* - wait for atmost [1-9][0-9]* seconds
---------------------------------------------------------------------------------------------------------------------
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
---> Start a MUPIP RECOVER process and let it hold onto access control lock
---> Now that the process is holding onto the ACCESS control lock, start another process to cause contention
---> This should cause SEMWT2LONG error
----------
Error YDB-E-DBFILERR seen in accsemcontender_2.out as expected:
%YDB-E-DBFILERR, Error with database file ##TEST_PATH##/mumps.dat
----------
----------
Error YDB-E-SEMWT2LONG seen in accsemcontender_2.out as expected:
##TEST_AWK%YDB-E-SEMWT2LONG, Process [1-9][0-9]* waited [1-9][0-9]* second.s. for the access control lock for region ##TEST_PATH##/mumps.dat, lock held by pid [1-9][0-9]*
----------
##FILTERED##%GTM-I-MUJNLSTAT, Initial processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Backward processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Forward processing started at ... ... .. ..:..:.. 20..
%GTM-I-FILECREATE, Journal extract file ##TEST_PATH##/mumps.mjf created
%GTM-S-JNLSUCCESS, Extract successful
##FILTERED##%GTM-I-MUJNLSTAT, End processing at ... ... .. ..:..:.. 20..

CASE 3 : Testing gtm_db_startup_max_wait environment variable with value set to -1 - wait indefinitely
---------------------------------------------------------------------------------------------------------------------
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
---> Start a MUPIP RECOVER process and let it hold onto access control lock
---> Now that the process is holding onto the ACCESS control lock, start another process to cause contention
---> This is the indefinite wait case. The ACCESS control lock contender will get the semaphore eventually
##FILTERED##%GTM-I-MUJNLSTAT, Initial processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Backward processing started at ... ... .. ..:..:.. 20..
##FILTERED##%GTM-I-MUJNLSTAT, Forward processing started at ... ... .. ..:..:.. 20..
%GTM-I-FILECREATE, Journal extract file ##TEST_PATH##/mumps.mjf created
%GTM-S-JNLSUCCESS, Extract successful
##FILTERED##%GTM-I-MUJNLSTAT, End processing at ... ... .. ..:..:.. 20..
##TEST_AWK\^accsemcontender="[1-9][0-9]*"


############################## ACCESS CONTROL SEMAPHORE TESTING ENDS ################################
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
