#################################################################
#								#
# Copyright (c) 2018 YottaDB LLC. and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################
#
set timeout 60
spawn /usr/local/bin/tcsh -f
# Change shell prompt to something other than ">" as that is a substring of the LKE prompt "LKE>"
# and can cause incorrect match later when we wait for the shell prompt.
expect -exact ">"
# Note: Changing the shell prompt to SHELL might seem easily achieved as follows.
#	send -- "set prompt=SHELL\r"
#	expect -exact "SHELL"
# But that will not work because it is possible the "expect" matches the SHELL from the "set prompt=SHELL" input
# instead of from the SHELL prompt later spewed out by the shell. To avoid this, we first store the "SHELL" string
# in a shell variable and use that variable in another line to set the prompt.
send -- "set shellprompt=SHELL\r"
expect -exact ">"
send -- "set prompt=\$shellprompt\r"
expect -exact "SHELL"

expect_after {
	timeout { timeout_procedure }
}

proc timeout_procedure { } {
	puts "timeout occurred"
	exit -1
}

send -- "\$gtm_dist/lke\r"

# Send <Ctrl-Z>
expect -exact "LKE>"
send -- "\x1A\r"

expect -exact "Suspended (signal)"
expect "SHELL"
send -- "fg\r"
expect -exact "lke"	# the shell prints the process' executable name whenever a backgrounded process is foregrounded
# Sometimes a LKE> prompt might show up. Sometimes it might not. To be sure send one more \r.
# Because of this non-determinism, the below portions of the test are filtered out from the reference file.
send -- "\r"
expect -exact "LKE>"
#exits from the LKE prompt
send -- "exit\r"

#exits from the tcsh shell
expect -exact "SHELL"
send -- "exit\r"

