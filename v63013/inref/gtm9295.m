;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;								;
; Copyright (c) 2022 YottaDB LLC and/or its subsidiaries.	;
; All rights reserved.						;
;								;
;	This source code contains the intellectual property	;
;	of its copyright holder(s), and is made available	;
;	under a license.  If you do not know the terms of	;
;	the license, please stop and do not read further.	;
;								;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Test for GTM-9295 - There are 3 parts to this test - The pre-V63013 problems solved/tested here are:
;
;    Part A:
;      - Possible incorrect results when:
;        - $[Z]TRANSLATE() appears more than once in a line.
;        - The first function evaluated is within an arithmetic or boolean expression.
;
;    Part B:
;      - UTF8 mode length exceeds expectations (output larger than allowed).
;
;    Part C:
;      - Using UTF8 mode $TRANSLATE() with NOBADCHAR can cause problems when encountering bad characters.
;
; Note the UTF8 value ranges used in this routine are taken from unicode/inref/genutfchar.m
;
; Currently Parts A & C are not valid tests - they succeed when they should fail.
;
	write "This routine should only be entered at one of the entry points. The main routine is not an entry point.",!
	zhalt 1

; Part A - create a condition that causes issues pre V63013 as described above. Note that the boolean expressions used in
; this test were generated by a modified version of ydb484.m from r130 test suite. Note also that some of these lines do
; not even reference $translate() but somehow they are important as the last line in this file is the only one that fails
; on a pre-V63013 build. But remove ANY of these lines and it no longer fails. This file is cut down from a MUCH larger
; generated program.
;
; This design is discussed here: https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/1447#note_1040954267
partA
	write "# partA^gtm9295: Test for incorrect results of $translate when it appears more than once in a line and the first",!
	write "# invocation evaluated is within an arithmetic or boolean expression.",!
	set (error,cnt)=0
	do chkexpr("set result=('(1'?1""0""))")
	do chkexpr("set result=(0]('('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))))")
	do chkexpr("set result=('('0))")
	do chkexpr("set result=((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'?1""0"")=((('1)=0)'=($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))))")
	do chkexpr("set result=(('(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'<('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))))'=0)")
	do chkexpr("set result=('(0'[($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))))")
	do chkexpr("set result=(('0)'?1""1"")")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=(1<((1?1""1"")'[('0)))")
	do chkexpr("set result=('(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'[0))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=(0>(((0[0)'=('0))?1""0""))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=(0'?1""0"")")
	do chkexpr("set result=('(('0)'=0))")
	do chkexpr("set result=(('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))'<($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'<0)'[('0))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=('('0))")
	do chkexpr("set result=('('0))")
	do chkexpr("set result=((('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))'=(0>1))]('0))")
	do chkexpr("set result=((((0'?1""1"")[0)']('0))<('(0'&($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))))")
	do chkexpr("set result=(((0=($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))?1""1"")>(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))]0))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=('('0))")
	do chkexpr("set result=(((0>=($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))[(0']]($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))))'=(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'[(0'>1)))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=(('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))=($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=('(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))]]0))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'[($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))>=('('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))))")
	do chkexpr("set result=(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'](($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'=($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))))")
	do chkexpr("set result=((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))!('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))))'?1""1"")")
	do chkexpr("set result=(0'?1""0"")")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=(0'?1""0"")")
	do chkexpr("set result=((0']]1)']('(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'[0)))")
	do chkexpr("set result=('(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'?1""0""))")
	do chkexpr("set result=((0'[0)[($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))")
	do chkexpr("set result=('(0'!0))")
	do chkexpr("set result=(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))?1""0"")")
	do chkexpr("set result=((0'](0'>($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))))']]0)")
	do chkexpr("set result=('(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))]0))")
	do chkexpr("set result=('(0<=($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))))")
	do chkexpr("set result=(('0)'?1""1"")")
	do chkexpr("set result=(('((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'&0)'?1""0""))'?1""0"")")
	do chkexpr("set result=((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))]0)'>(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))<=(0'[0)))")
	do chkexpr("set result=((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))]0)'>(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))<=(0'[0)))")
	do chkexpr("set result=((0'<(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))[(0'?1""1"")))'=0)")
	do chkexpr("set result=(((($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))>0)](0'=0))']]0)")
	do chkexpr("set result=('((0=0)!(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))[1)))")
	do chkexpr("set result=(('0)'?1""1"")")
	do chkexpr("set result=('('0))")
	do chkexpr("set result=('(($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120)))'[(0?1""1"")))")
	do chkexpr("set result=('($translate($char(120)_$char(128)_$char(124),$char(128),$char(129))=$translate($char(119)_$char(129)_$char(124),$char(119),$char(120))))",0)
	write:(0=error) !,"SUCCESS - all cases tested passed",!
	write:(0'=error) !,"Test failed in ",error," case(s)",!
	quit

chkexpr(cmdstr,value)
	new result
	set cnt=cnt+1
	set value=$get(value,0)		; Default of 0
	xecute cmdstr
	write:result'=value "Value for test ",cnt," expected to be ",value," but was ",result," instead",!
	set:result'=value error=error+1
	quit

; Part B - create mode length exceeding expectations and be sure it works in V63013 and later
;
; This design is discussed here: https://gitlab.com/YottaDB/DB/YDBTest/-/issues/458#note_1039514702
partB
	write "# partB^gtm9295: Cause a smaller string to grow into too large a string (> 1MB) and expect a MAXSTRLEN error.",!
	set $etrap="do partBoopsie"
	set gotMAXSTRLEN=0
	set srcstr=$justify(" ",2**20)	; 1MB string of blanks (max string length we support) for input string
	do  		      		; Run translate one level down so can return from it and keep going
	. ; Convert each (single byte) blank to a 4 byte UTF8 char to cause a string overflow
	. set retstr=$translate(srcstr," ",$char(66639))
	write:'gotMAXSTRLEN !,"FAILURE - Failed to get MAXSTRLEN error",!
	write:gotMAXSTRLEN !,"SUCCESS - Received the expected MAXSTRLEN error",!
	quit

; Error handler for partB
partBoopsie
	if $zstatus'["MAXSTRLEN" do
	. write "Unexpected (fatal) failure: ",$zstatus,!
	. zhalt 1
	set $ecode=""			; Clear error and return
	set gotMAXSTRLEN=1
	quit

; Part C - do translation with a badchar embedded in source string while in NOBADCHAR mode.
;
; This design is discussed here: https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/1447#note_1040978421
partC
	write "# partC^gtm9295: Do translation with an embedded badchar while doing translation in UTF8 mode with NOBADCHAR on.",!
	view "NOBADCHAR"
	set source="a"_$zchar(128)_"c"
	set from=$zchar(128)
	set replace="b"
	set result=$translate(source,from,replace)
	write:("abc"=result) !,"SUCCESS - translation done correctly",!
	write:("abc"'=result) !,"FAILURE - expected value was ""abc"" but received: ",$zwrite(result),!
 	quit
