#!/usr/bin/expect -f
#################################################################
#								#
# Copyright (c) 2019-2024 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

# The timeout for the expect is set to 300 to ensure that the expect won't timeout
# after 10 seconds. This was added in February 2021 after this script timed out on
# an armv7l machine while waiting for the second Ctrl-C.
set timeout 300
spawn /usr/local/bin/tcsh -f
source $::env(gtm_tst)/com/expectinit.exp

proc send_ctrlc {} {
	# When ydb_readline env var is set to 1, we have noticed that when a Ctrl-C is sent, the terminal echo could be still off
	# (because the code is still in the control of libreadline)and so the "^C" does not get displayed. Additionally a few
	# newlines also get displayed depending on where in the libreadline code we are when the SIGINT is received. Therefore,
	# to avoid this and wait for the OPEN command to start # executing, sleep for a small bit (1 second) before moving on to
	# the next step (which is to send the Ctrl-C).
	if {$::env(ydb_readline) == 1} {
		sleep 1
	}
	# Send Ctrl-C
	send \x03
}

send -- "\$ydb_dist/mumps -direct\r"
expect -exact "YDB>"

# open pipe with a 60 second timeout and send it a Ctrl-C
send -- "OPEN \"unicodefifoM.pipe\":(FIFO:WRITE:RECORDSIZE=-1:CHSET=\"M\"):60\r"
expect -exact "\r"
send_ctrlc
expect -exact "%YDB-I-CTRLC, CTRL_C encountered"
expect -exact "YDB>"
send -- "OPEN \"unicodefifoM.pipe\":(FIFO:WRITE:RECORDSIZE=-1:CHSET=\"M\"):60\r"
expect -exact "\r"
# send another Ctrl-C so the expect script can continue
send_ctrlc
expect -exact "%YDB-I-CTRLC, CTRL_C encountered"
expect -exact "YDB>"
send -- "halt\r"
expect -exact "SHELL"
send "exit\r"
