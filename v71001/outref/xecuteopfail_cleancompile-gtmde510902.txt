# ********************************************************************************************
# GTM-DE340950 - Test the following release note
# ********************************************************************************************
# 
# Release note (from http://tinco.pair.com/bhaskar/gtm/doc/articles/GTM_V7.1-001_Release_Notes.html#GTM-DE510902)
# 
# GT.M prevents compile-time errors in operations on literals within an XECUTE block from terminating the XECUTE without properly cleaning up the surrounding compilation environment. Previously, this could cause termination of compilation of the routine containing the XECUTE and failure to compile subsequent routines passed to the same GT.M process (GTM-DE510902)
# 

# Generate test routines for each of the following errors implicated by the changes in the release note:
# 1. DIVZERO
# 2. NEGFRACPWR
# 3. NUMOFLOW
# 4. PATNOTFOUND
# This list is derived from a review of the v71001 changes to sr_port/stx_error.c.
# However, only the NEGFRACPWR and NUMOFLOW cases show behavioral differences in v71001,
# though all 4 of the above error codes are implicated in the changes to sr_port/stx_error.c.
# See the following GitLab discussions for details:
# + https://gitlab.com/YottaDB/DB/YDBTest/-/issues/666#note_2379300790
# + https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/2248#note_2401375342

# Run each test routine, followed by the 'noerror' routine.
# In the case expect an error from the test routine, followed by '1' from the 'noerror' routine.
# Prior to V71001, in the cases of NEGFRACPWR and NUMOFLOW, the 'noerror' routine would not compile
# after attempting to compile the matching test routine.
# Instead, in the cases of NEGFRACPWR and NUMOFLOW:
# 1. pro builds would issue GTM-E-ZLINKFILE and GTM-E-ZLNOOBJECT errors
# 2. dbg builds would issue assert failures like the following:
#   %GTM-F-ASSERT, Assert failed in /Distrib/YottaDB/V71000/sr_port/mdb_condition_handler.c line 488 for expression (!TREF(xecute_literal_parse))

spawn /usr/local/bin/tcsh -f
> stty cols 132
> set shellprompt=SHELL
> set prompt=$shellprompt
SHELLsetenv term_env `tty`; echo $term_env > term_env.txt
SHELL$gtm_dist/mumps -dir

GTM>do ^DIVZERO
%GTM-E-DIVZERO, Attempt to divide by zero
		At M source location divzero^DIVZERO

GTM>do ^noerror
1

GTM>h
SHELLspawn /usr/local/bin/tcsh -f
> stty cols 132
> set shellprompt=SHELL
> set prompt=$shellprompt
SHELLsetenv term_env `tty`; echo $term_env > term_env.txt
SHELL$gtm_dist/mumps -dir

GTM>do ^NEGFRACPWR
%GTM-E-NEGFRACPWR, Invalid operation: fractional power of negative number
		At M source location negfracpwr^NEGFRACPWR

GTM>do ^noerror
1

GTM>h
SHELLspawn /usr/local/bin/tcsh -f
> stty cols 132
> set shellprompt=SHELL
> set prompt=$shellprompt
SHELLsetenv term_env `tty`; echo $term_env > term_env.txt
SHELL$gtm_dist/mumps -dir

GTM>do ^NUMOFLOW
%GTM-E-NUMOFLOW, Numeric overflow
		At M source location numoflow^NUMOFLOW

GTM>do ^noerror
1

GTM>h
SHELLspawn /usr/local/bin/tcsh -f
> stty cols 132
> set shellprompt=SHELL
> set prompt=$shellprompt
SHELLsetenv term_env `tty`; echo $term_env > term_env.txt
SHELL$gtm_dist/mumps -dir

GTM>do ^PATNOTFOUND
%GTM-E-PATNOTFOUND, Current pattern table has no characters with pattern code S
		At M source location patnotfound^PATNOTFOUND

GTM>do ^noerror
1

GTM>h
SHELL
##TEST_PATH##/expect-DIVZERO-sanitized.out
%GTM-E-DIVZERO, Attempt to divide by zero
##TEST_PATH##/expect-NEGFRACPWR-sanitized.out
%GTM-E-NEGFRACPWR, Invalid operation: fractional power of negative number
##TEST_PATH##/expect-NUMOFLOW-sanitized.out
%GTM-E-NUMOFLOW, Numeric overflow
##TEST_PATH##/expect-PATNOTFOUND-sanitized.out
%GTM-E-PATNOTFOUND, Current pattern table has no characters with pattern code S
