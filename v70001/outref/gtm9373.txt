# ********************************************************************************************
# GTM-9373 - Test the following release note
# ********************************************************************************************
# 
# Release note (from http://tinco.pair.com/bhaskar/gtm/doc/articles/GTM_V7.0-001_Release_Notes.html#GTM-9373)
# 
# MUPIP REPLICATE -SOURCE -SHOWBACKLOG considers a transaction as backlogged until it is acknowledged
# from the Receiver Server. The SRCBACKLOGSTATUS message reports whether a Receiver Server is behind,
# ahead, or has not yet acknowledged the transactions. The LASTTRANS message reports the state (posted,
# sent, or acknowledged) of the Source Server transactions under replication. Previously, the MUPIP
# REPLICATE -SOURCE -SHOWBACKLOG did not display the SRCBACKLOGSTATUS and LASTTRANS messages, did not
# consider in-flight transactions as a backlog and did not report when the replicating instance was
# ahead during conditions such as online rollback. (GTM-9373)
# 
# ********************************************************************************************

# In order to keep test runtime to a minimum, this test uses a small heartbeat period of 32 seconds
# We expect events to happen in this short period of time at various stages of this test.
# This is too small a time period for the ARM systems and hence this subtest is disabled there

# Set heartbeat period as 32 seconds in -CONNECTPARAMS qualifier passed to [mupip replic -source -start]
# Do this by setting [gtm_test_src_connectparams] env var to [-connectparams=5,500,5,0,32,60]

# Since we do online rollback on source side, pass -AUTOROLLBACK to [mupip replic -receiver -start]
# Do this by setting [gtm_test_autorollback] env var to [TRUE]

# Run [dbcreate.csh] to create database and start replication servers on source and receiver side
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
Files Created in ##REMOTE_TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
Starting Primary Source Server in ##TEST_PATH##
Starting Passive Source Server and Receiver Server in ##REMOTE_TEST_PATH##

# Run [mupip replic -source -showbacklog]
# Verify LASTTRANS messages show posted/sent/acknowledged sequence number as 0
# Verify SRCBACKLOGSTATUS message shows [has not acknowledged 0 transaction(s)]
##FILTERED##... ... .. ..:..:.. 20.. : Initiating SHOWBACKLOG operation on source server pid [##PID##] for secondary instance [INSTANCE2]
%YDB-I-LASTTRANS, Last transaction sequence number posted         : 0
%YDB-I-LASTTRANS, Last transaction sequence number sent           : 0
%YDB-I-LASTTRANS, Last transaction sequence number acknowledged   : 0
%YDB-I-SRCBACKLOGSTATUS, Instance INSTANCE2 has not acknowledged 0 transaction(s)

# Perform 100 updates on INST1

# Wait for source side backlog to become 0

# Run [mupip replic -source -showbacklog]
# Verify LASTTRANS messages show posted/sent as 100 AND acknowledged as 0
# Verify SRCBACKLOGSTATUS message shows [has not acknowledged 0 transaction(s)]
##FILTERED##... ... .. ..:..:.. 20.. : Initiating SHOWBACKLOG operation on source server pid [##PID##] for secondary instance [INSTANCE2]
%YDB-I-LASTTRANS, Last transaction sequence number posted         : 100
%YDB-I-LASTTRANS, Last transaction sequence number sent           : 100
%YDB-I-LASTTRANS, Last transaction sequence number acknowledged   : 0
%YDB-I-SRCBACKLOGSTATUS, Instance INSTANCE2 has not acknowledged 100 transaction(s)

# Sleep 32 + 1 seconds (heartbeat period + 1 second for some slack).
# Run [mupip replic -source -showbacklog]
# We expect [has not acknowledged] to change into [is behind by].
# Verify LASTTRANS messages show posted/sent/acknowledged sequence number as 100
# Verify SRCBACKLOGSTATUS message shows [is behind by 0 transaction(s)]
##FILTERED##... ... .. ..:..:.. 20.. : Initiating SHOWBACKLOG operation on source server pid [##PID##] for secondary instance [INSTANCE2]
%YDB-I-LASTTRANS, Last transaction sequence number posted         : 100
%YDB-I-LASTTRANS, Last transaction sequence number sent           : 100
%YDB-I-LASTTRANS, Last transaction sequence number acknowledged   : 100
%YDB-I-SRCBACKLOGSTATUS, Instance INSTANCE2 is behind by 0 transaction(s)

# Start background updates

# Wait until acknowledged number increases from its current value
# Run [mupip replic -source -showbacklog] : Output in [backlog2.out]

# Stop background updates
# We now expect posted/sent/acknowledged to all have increased.
# Verify LASTTRANS messages show posted/sent/acknowledged sequence number ALL to be GREATER THAN 100
PASS
# Verify acknowledged <= sent <= posted
PASS
# Verify SRCBACKLOGSTATUS indicates [is behind by]
##TEST_AWK%YDB-I-SRCBACKLOGSTATUS, Instance INSTANCE2 is behind by [0-9]* transaction\(s\)
# Verify acknowledged + behind = posted
PASS

# Wait until backlog is 0 on both source and receiver side
# Sleep 32 seconds (heartbeat period). To ensure [acknowledged] is updated by receiver on source side in one heartbeat

# Run [mupip replic -source -showbacklog] : Output in [backlog3.out]
# Verify LASTTRANS messages show posted/sent/acknowledged as the same value (let us say N)
PASS
# Verify SRCBACKLOGSTATUS indicates [is behind by 0 transaction(s)]
%YDB-I-SRCBACKLOGSTATUS, Instance INSTANCE2 is behind by 0 transaction(s)

# Run [mupip journal -rollback -online -back -resync=101 "*"] to roll INST1 back to seqno=101

# Run [mupip replic -source -showbacklog] : Output in [backlog4.out]
# Verify posted is 100
PASS
# Verify sent is 100 or N
PASS
# Verify acknowledged is N
PASS
# Verify SRCBACKLOGSTATUS message indicates [is ahead by] due to the online rollback
##TEST_AWK%YDB-I-SRCBACKLOGSTATUS, Instance INSTANCE2 is ahead by [1-9][0-9]* transaction\(s\)
# Verify SRCBACKLOGSTATUS message indicates ahead by N-100 transaction(s)
PASS

# Wait until receiver server has also done online rollback and reconnected to source server
# Note: The history record would have a [Cycle = 2] in it so wait for that to show up in the receiver server log
# Sleep 32 seconds (heartbeat period). To ensure [acknowledged] is updated by receiver on source side in one heartbeat

# Run a final [mupip replic -source -showbacklog]
# Verify LASTTRANS messages show posted/sent/acknowledged sequence number as 100
# Verify SRCBACKLOGSTATUS message shows [is behind by 0 transaction(s)]
##FILTERED##... ... .. ..:..:.. 20.. : Initiating SHOWBACKLOG operation on source server pid [##PID##] for secondary instance [INSTANCE2]
%YDB-I-LASTTRANS, Last transaction sequence number posted         : 100
%YDB-I-LASTTRANS, Last transaction sequence number sent           : 100
%YDB-I-LASTTRANS, Last transaction sequence number acknowledged   : 100
%YDB-I-SRCBACKLOGSTATUS, Instance INSTANCE2 is behind by 0 transaction(s)

# Run [dbcheck.csh] to integ database and shut replication servers on source and receiver side
Shutting down Passive Source Server and Receiver Server in ##REMOTE_TEST_PATH##
Shutting down Primary Source Server Server in ##TEST_PATH##
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
