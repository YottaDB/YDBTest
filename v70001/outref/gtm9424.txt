# ********************************************************************************************
# GTM-9424 - Test the following release note
# ********************************************************************************************
# 
# Release note (from http://tinco.pair.com/bhaskar/gtm/doc/articles/GTM_V7.0-001_Release_Notes.html#GTM-9424)
# 
# 1) MUPIP BACKUP -DATABASE uses what seems to be the best copy mechanism available on the kernel to create
#    a backup copy of the database. If the copy mechanism supports monitoring, MUPIP BACKUP -SHOWPROGRESS
#    periodically displays the transfer progress, estimated time left, speed, and the number of transaction
#    applied to the database during backup. Pressing CTRL_C performs the appropriate cleanup and exits the
#    BACKUP command. Previously, MUPIP BACKUP used cp or pax for copy phase and did not have a progress
#    monitoring mechanism. On kernels where the copy mechanism supports robust error handling, MUPIP BACKUP
#    handles error conditions such as ENOMEM, ENOSPC, EIO, and so on with a more descriptive action message.
# 
# 2) MUPIP BACKUP displays the BKUPFILPERM message when it finds that there is no write permission for the
#    backup file. MUPIP BACKUP performs this check before starting BACKUP. Previously, MUPIP BACKUP reported
#    this condition after performing the copy.
# 
# 3) The -RETRY=n qualifier of MUPIP BACKUP -DATABASE makes n number of attempts to retry performing BACKUP
#    if the backup fails. If -RETRY is not specified, GT.M defaults -RETRY to zero (0). In case of an error,
#    retry attempts are always based on cp or pax. Previously, the -RETRY qualifier was not available.(GTM-9424)
# 
# ##########################################################################################
# Test 1 : Test 1st paragraph of release note
# ##########################################################################################
# a) The [best copy mechanism] mentioned in the 1st paragraph of the release note is one that invokes the
# copy_file_range() system call in the YDB code. I did verify manually that on a 2Gb sized database
# (filled by running the M command [for i=1:1:10000000 set ^x(i)=$j(i,200)]), GT.M V7.0-001 takes 23%
# less elapsed time than GT.M V7.0-000 when measured using the shell builtin [time] command. The same
# time improvement is seen even between YottaDB master (which has V7.0-001 merged) and r1.38 (which only
# has GT.M V6.3-014 merged). It is not easy to automate this test of performance improvement so that is
# not tested here.
# 
# b) The [MUPIP BACKUP -SHOWPROGRESS] command and its output is tested (though in a primitive form) in the
# v70001/gtm4272 subtest (in Test # 2) as part of commit 81a7f6d8. That is as good of an automated test
# case we can easily come up with.
# 
# c) The [ENOMEM, ENOSPC, EIO] error handling part is tested by trying to backup to a target file system that
# is a different mount point than the current file system. We use /tmp for that purpose. We expect an
# error message corresponding to the EXDEV error code (Error code: 18, Invalid cross-device link) in the
# mupip backup output. That is considered enough of a test of other error return values from copy_file_range()
# like ENOMEM, ENOSPC, EIO etc.
# 
# d) The [CTRL_C] part of the release note is tested by issuing a Ctrl-C to a backup command while it is
# running and expecting to see a %YDB-I-BACKUPCTRL message in the output followed by a %YDB-E-MUNOFINISH.
# In addition, we also check that the target directory has no files created (i.e. appropriate cleanup was done).

# Create database
##SUSPEND_OUTPUT NO_COPYFILERANGE_AVAIL TST_DIR_FSTYPE_SAME_AS_TMP UBUNTU_20.04 HOST_LINUX_ARMVXL HOST_LINUX_AARCH64
# ------------------------------
# Test (1c) : EXDEV error code from MUPIP BACKUP
# ------------------------------
# Try running mupip backup with target directory of /tmp (which is different mount point)
# Expect to see [Error code: 18, Invalid cross-device link] error.
##SUSPEND_OUTPUT JNL_OFF
##FILTERED##%YDB-I-FILERENAME, File ##TEST_PATH##/mumps.mjl is renamed to ##TEST_PATH##/mumps.mjl_##TIMESTAMP##
##TEST_AWK%YDB-I-JNLCREATE, Journal file ##TEST_PATH##/mumps.mjl created for region DEFAULT with (|NO)BEFORE_IMAGES
##ALLOW_OUTPUT JNL_OFF
%YDB-I-TEXT, Error occurred during the copy phase of MUPIP BACKUP
%YDB-I-TEXT, Error code: 18, Invalid cross-device link
%YDB-E-MUNOFINISH, MUPIP unable to finish all requested actions
# ------------------------------
# Test the following line of the 3rd paragraph of the GT.M release note
#     In case of an error, retry attempts are always based on cp or pax.
# Try running mupip backup with target directory of /tmp but with [-retry=2]
# We expect to see [Error code: 18, Invalid cross-device link] error in the first attempt.
# But we expect the second attempt to succeed because it will happen with cp (not copy_file_range())
# Expect to see 1 BKUPRETRY message for the second attempt.
#
# Note that Test (1c) did not run backup with [-retry] and therefore also tested the following line
# of the 3rd paragraph of the GT.M release note. The output there would not have had any BKUPRETRY messages.
#     If -RETRY is not specified, GT.M defaults -RETRY to zero (0)
# ------------------------------
##SUSPEND_OUTPUT JNL_OFF
##FILTERED##%YDB-I-FILERENAME, File ##TEST_PATH##/mumps.mjl is renamed to ##TEST_PATH##/mumps.mjl_##TIMESTAMP##
##TEST_AWK%YDB-I-JNLCREATE, Journal file ##TEST_PATH##/mumps.mjl created for region DEFAULT with (|NO)BEFORE_IMAGES
##ALLOW_OUTPUT JNL_OFF
%YDB-I-TEXT, Error occurred during the copy phase of MUPIP BACKUP
%YDB-I-TEXT, Error code: 18, Invalid cross-device link
%YDB-I-BKUPRETRY, Retrying MUPIP BACKUP for region: DEFAULT (database file: ##TEST_PATH##/mumps.dat). Attempt: #2 of 2
##TEST_AWK%YDB-I-BACKUPDBFILE, DB file ##TEST_PATH##/mumps.dat backed up in file /tmp/mumps_.*.dat
%YDB-I-BACKUPTN, Transactions from 0x0000000000000001 to 0x0000000000000001 are backed up
%YDB-I-BACKUPSUCCESS, Backup completed successfully
##ALLOW_OUTPUT NO_COPYFILERANGE_AVAIL TST_DIR_FSTYPE_SAME_AS_TMP UBUNTU_20.04 HOST_LINUX_ARMVXL HOST_LINUX_AARCH64
# ------------------------------
# Test (1d) : Ctrl-C results in BACKUPCTRL error message
# ------------------------------
# Fill the .dat file with enough updates to make sure the mupip backup command runs for a while so we can Ctrl-C it.
# Filter out lines containing %YDB from mupip backup output. Expect to see BACKUPCTRL and MUNOFINISH messages.
# Remove the [^C] character from the output as it can show up in an arbitrary position making the output non-deterministic.
# Also filter out %YDB-I-FILERENAME and %YDB-I-JNLCREATE lines as the journal file switch may or may not happen depending
# on where in the mupip backup process flow the Ctrl-C interrupts.
# Additionally, the %YDB-I-BACKUPCTRL could show up sometimes without being in a new line depending on when the
# Ctrl-C happens. Therefore ensure it always starts at a new line using a [sed] command below.
%YDB-I-BACKUPCTRL, Control Y or control C encountered during backup, aborting backup
%YDB-E-MUNOFINISH, MUPIP unable to finish all requested actions

# Check that [bak1] directory has NO files in it (i.e. appropriate cleanup happened in [mupip backup] command).
# Running [ls -l bak1]. Expecting no output.
total 0
############################################################################################
# Test 2 : Test 2nd paragraph of release note
############################################################################################
# Test that BKUPFILPERM message is issued in case of no write permission to target backup file
# Also test that this message is issued BEFORE any starting the BACKUP. This is done by issuing
# a mupip backup command using the [-dbg] qualifier and expecting to not see any [MUPIP INFO] messages
# as seeing those would mean backup did some work BEFORE issuing the error.
# Create target file [bak1/mumps.dat] and remove write permissions on it
# Run [mupip backup -replace -noonline -dbg * bak1/mumps.dat]
# Need to use [-replace] to be able to overwrite an existing target file
# Need to use [-noonline] to avoid a FILEEXISTS error that shows up before the BKUPFILPERM code path in the -online case
# Expect to see BKUPFILEPERM and MUNOFINISH errors below
%YDB-E-BKUPFILEPERM, Backup file ##TEST_PATH##/bak1/mumps.dat does not have write permission
%YDB-E-MUNOFINISH, MUPIP unable to finish all requested actions
# ------------------------------
# Test the following line of the 3rd paragraph of the GT.M release note
#     The -RETRY=n qualifier of MUPIP BACKUP -DATABASE makes n number of attempts to retry
#     performing BACKUP if the backup fails.
# Rerun the same mupip backup command as the previous stage but with [-retry=3]
# We expect to see BKUPFILPERM message 3 times along with 2 BKUPRETRY messages for the 2nd and 3rd attempts.
# Run [mupip backup -replace -noonline -retry=3 * bak1/mumps.dat]
# ------------------------------
%YDB-E-BKUPFILEPERM, Backup file ##TEST_PATH##/bak1/mumps.dat does not have write permission
%YDB-I-BKUPRETRY, Retrying MUPIP BACKUP for region: DEFAULT (database file: ##TEST_PATH##/mumps.dat). Attempt: #2 of 3
%YDB-E-BKUPFILEPERM, Backup file ##TEST_PATH##/bak1/mumps.dat does not have write permission
%YDB-I-BKUPRETRY, Retrying MUPIP BACKUP for region: DEFAULT (database file: ##TEST_PATH##/mumps.dat). Attempt: #3 of 3
%YDB-E-BKUPFILEPERM, Backup file ##TEST_PATH##/bak1/mumps.dat does not have write permission
%YDB-E-MUNOFINISH, MUPIP unable to finish all requested actions
# Do dbcheck on database
