------------------------------------------------------------------------------------------------------------
Test 1 : Source server sends transactions in timely fashion when reading from journal files after a rollback
------------------------------------------------------------------------------------------------------------
--> Set jnlpool buffer size of 1Mb
--> Set alignsize of 8Mb
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
a.dat
b.dat
mumps.dat
Files Created in ##FILTERED##_REMOTE_TEST_PATH_/instance2:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
a.dat
b.dat
mumps.dat
==Executing MULTISITE_REPLIC 'START INST1 INST2 RP'==
Starting Primary Source Server in ##TEST_PATH##
Starting Passive Source Server and Receiver Server in ##FILTERED##_REMOTE_TEST_PATH_/instance2
==Executing MULTISITE_REPLIC 'STOPRCV INST1 INST2'==
--> Do updates that fill up the journal pool
--> Stop source server to adjust region sequence numbers in db file header (simulates the effect of a rollback)
==Executing MULTISITE_REPLIC 'STOPSRC INST1 INST2'==
--> Find Region Seqno of B.DAT

--> BREG Region Seqno = 18B51
--> Adjust region sequence numbers of AREG and DEFAULT to be the same as BREG

File  	##TEST_PATH##/a.dat
Region	AREG

DSE> DSE> 
File  	##TEST_PATH##/mumps.dat
Region	DEFAULT

DSE> DSE> 
--> Restart source server
==Executing MULTISITE_REPLIC 'STARTSRC INST1 INST2'==
--> Start receiver server
==Executing MULTISITE_REPLIC 'STARTRCV INST1 INST2'==
--> Check that source server has sent all data without issues
--> Expect backlog progress every 30 seconds instead of the test framework default (which could be order of minutes)
==Executing MULTISITE_REPLIC 'RUN INST1 $gtm_tst/com/dbcheck_base.csh  -noleftoveripccheck'==
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
==Executing MULTISITE_REPLIC 'RUN INST2 $gtm_tst/com/dbcheck_base.csh  -noleftoveripccheck'==
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
-------------------------------------------------------------------------------------------------------------------------
Test 2 : Source server reads correctly from journal files even if concurrent jnl switch happens while it is in first_read
-------------------------------------------------------------------------------------------------------------------------
--> Set alignsize of 2Mb and autoswitchlimit of 8Mb
--> This causes source server to invoke <repl_read_file> of first 2Mb inside <first_read> function
-->      as well as invoke <repl_read_file> of last 2Mb (of 8Mb) at end of <first_read> as part of <update_max_seqno_info>
--> We hope to do the concurrent jnl switch while it is in the second <repl_read_file> call
--> This tests a regression in the code that happened as part of the first round of GTM-8118 fixes
--> Stop receiver server
==Executing MULTISITE_REPLIC 'STOPRCV INST1 INST2'==
--> Switch to new journal file with 8Mb autoswitchlimit and 2Mb alignsize
##FILTERED##%YDB-I-FILERENAME, File ##TEST_PATH##/a.mjl is renamed to ##TEST_PATH##/a.mjl_##TIMESTAMP##
##FILTERED##%YDB-I-FILERENAME, File ##TEST_PATH##/b.mjl is renamed to ##TEST_PATH##/b.mjl_##TIMESTAMP##
##FILTERED##%YDB-I-FILERENAME, File ##TEST_PATH##/mumps.mjl is renamed to ##TEST_PATH##/mumps.mjl_##TIMESTAMP##
##TEST_AWK.YDB-I-JNLCREATE, Journal file ##TEST_PATH##/a.mjl created for region AREG with .*BEFORE_IMAGES
##TEST_AWK.YDB-I-JNLCREATE, Journal file ##TEST_PATH##/b.mjl created for region BREG with .*BEFORE_IMAGES
##TEST_AWK.YDB-I-JNLCREATE, Journal file ##TEST_PATH##/mumps.mjl created for region DEFAULT with .*BEFORE_IMAGES
%YDB-I-JNLSTATE, Journaling state for region AREG is now ON
%YDB-I-JNLSTATE, Journaling state for region BREG is now ON
%YDB-I-JNLSTATE, Journaling state for region DEFAULT is now ON
--> Do approximately 8Mb of updates to fill it
--> Do some more updates in the background to cause autoswitch
--> Sleep randomly before switch to increase chances of catching source server in the second call to <repl_read_file>
--> Start receiver server. Since jnlpool size is 1Mb, source server is now forced to read from journal file
==Executing MULTISITE_REPLIC 'STARTRCV INST1 INST2'==
--> Wait for backgrounded updates to finish
==Executing MULTISITE_REPLIC 'SYNC ALL_LINKS'==
==Executing MULTISITE_REPLIC 'STOP ALL_LINKS OFF'==
==Executing MULTISITE_REPLIC 'EXTRACT ALL'==
DATABASE EXTRACT PASSED
==Executing MULTISITE_REPLIC 'RUN INST1 $gtm_tst/com/dbcheck_base.csh '==
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
==Executing MULTISITE_REPLIC 'RUN INST2 $gtm_tst/com/dbcheck_base.csh '==
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
