#!/usr/bin/expect -f
#################################################################
#								#
# Copyright (c) 2016 Fidelity National Information		#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
# Copyright (c) 2025 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################
#Everything must match initially
set timeout -1
match_max 100000

# Start up a TCSH shell first. You could spawn $env(SHELL) if you like
spawn /usr/local/bin/tcsh -f
set mainid $spawn_id

# Capture and sanitze the prompt. Note that expect uses \r to send carriage
# returns like a keyboard. It is a good idea to preceed SENDs with the expected
# output when writing scripts.
expect "*"
send -- "set prompt=\"Shell2M>\"\r"

# Depending on what you are testing, you may need to incorporate the TERM and
# TTY setup from test/expect/inref_u/d002548.exp

# Execute a script with all the smarts
expect "Shell2M>"
send "source \$gtm_tst/\$tst/inref/c003274.csh\r"

# Wait for the M routine to hang and send the first interrupt
expect "c003274 started"
send -- "\r"

# Loosen the matching restrictions
set timeout 30
spawn $env(gtm_dist)/mumps -run intrpt^c003274
expect eof

# Send a control-C along with some new lines. Sleep to ensure that the
# interrupts and control-C don't overlap. If they overlap, it's possible for
# one SIGUSR1 to be ignored.
sleep 1
send -i $mainid "\r"
send -i $mainid "\03"
send -i $mainid "\r"
sleep 1

# Send the next interrupt
spawn $env(gtm_dist)/mumps -run intrpt^c003274
expect eof

# Stop the JOB'ed process after waiting one more second
spawn $env(gtm_dist)/mumps -run alldone^c003274
expect eof

# Expect should wait until MUMPS exits
expect -i $mainid "complete"
