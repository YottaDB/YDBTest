#!/usr/bin/expect -f
#################################################################
#                                                               #
# Copyright (c) 2017-2023 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
# Portions Copyright (c) Fidelity National Information 		#
# Services, Inc. and/or its subsidiaries.			#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################
# This module is derived from FIS GT.M.
#################################################################
#
# This Expect script was generated by autoexpect on Thu Jul 18 13:43:27 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL) -f
match_max 100000
expect "*"
send -- "set prompt=\"GTM7675>\"\r"
expect "*"
expect -- "GTM7675>"
send -- "uname\r"
expect {
        "HP-UX" {
                send -- "setenv TERM vt220\r"
                expect -- "GTM7675>"
                send -- "stty erase '^?'\r"
                expect -- "GTM7675>"
                send -- "stty intr '^c'\r"
	}
	"AIX" {
                send -- "setenv TERM vt320\r"
                expect -- "GTM7675>"
               	send -- "stty erase '^?'\r"
	}
        "SunOS" {
                send -- "setenv TERMINFO /usr/local/lib/terminfo\r"
                expect -- "GTM7675>"
                send -- "setenv TERM vt220\r"
                expect -- "GTM7675>"
		send -- "stty erase ^?\r"
                expect -- "GTM7675>"
                send -- "alias stty /usr/ucb/stty\r"
        }
        "Linux" {
               	send -- "setenv TERM vt220\r"
                expect -- "GTM7675>"
		send -- "stty erase '^?'\r"
	}
}
set timeout 10
# Tests starts here
expect -- "GTM7675>"
send -- "\$gtm_dist/mumps -run erasebs\r"
expect "Enter ERASE special terminal input character\r"
send "\177"
expect "PASS\r"
expect "Enter backspace key\r"
send "\010"
expect "PASS\r"
send -- "exit\r"
expect eof
