#!/usr/bin/expect -f
#################################################################
#								#
# Copyright (c) 2015-2016 Fidelity National Information		#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
# Copyright (c) 2017-2018 YottaDB LLC. and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################
#Everything must match initially
set timeout -1
set ctrlc 0
match_max 100000
exp_internal 1
# Start up a TCSH shell first. You could spawn $env(SHELL) if you like
spawn /usr/local/bin/tcsh -f

expect_after {
	timeout {puts "TEST-W-WARN a timeout occurred"}
}

# log additional output to a file
log_file -noappend ctrlc_expect.log

# Capture and sanitze the prompt. Note that expect uses \r to send carriage
# returns like a keyboard. It is a good idea to preceed SENDs with the expected
# output when writing scripts.
expect "*"
send -- "set prompt=\"ctrlc>\"\r"
expect "set prompt=\"ctrlc>\""

# Convince AIX to use ^? for erase
expect "ctrlc>"
send -- "stty erase '^?'\r"

# Convince HP-UX to accept ctrl-c
expect "ctrlc>"
send -- "stty intr '^c'\r"

# Check it
expect "ctrlc>"
send -- "stty -a\r"

expect "ctrlc>"
send -- "\$gtm_exe/mumps -direct\r"

# Depending on what you are testing, you may need to incorporate the TERM and
# TTY setup from test/expect/inref_u/d002548.exp

# Loosen the matching restrictions only AFTER you get into your test. Here, we
# are waiting for the GTM prompt before going forward
expect "
YDB>"
set timeout 300

# FOR loop
send -- "do ^ctrlc\r"
expect "for i=1:1:10000000  SET x=x+1"
send -- "\003"
expect "YDB-I-CTRLC, CTRL_C encountered" {set ctrlc [expr $ctrlc + 1]}

# ZSHOW
send -- "do zshow^ctrlc\r"
expect "a=0"
send -- "\003"
expect "YDB-I-CTRLC, CTRL_C encountered" {set ctrlc [expr $ctrlc + 1]}

# ZWRITE
send -- "do zwrite^ctrlc\r"
expect "a=0"
send -- "\003"
expect "YDB-I-CTRLC, CTRL_C encountered" {set ctrlc [expr $ctrlc + 1]}

# XECUTEd ZWRITE
send -- "do xzwrite^ctrlc\r"
expect "a=0"
send -- "\003"
expect "YDB-I-CTRLC, CTRL_C encountered" {set ctrlc [expr $ctrlc + 1]}

# Validate (set status in advance in case the matching fails)
expect "
YDB>"
send "do validate^ctrlc\r"
set status "MISSING"
expect "Checking test status"
expect {
	"FAIL" {set status "FAIL"}
	"PASS" {set status "PASS"}
}

# NEVER EVER send "halt" to the GT.M prompt from expect because you might be at an actual prompt
expect "
YDB>"
send -- "h\r"

# LKE - MREP expect_spawn_id_expNN_not_open explains why we issue the command at the LKE prompt
expect "ctrlc>"
send -- "echo \"Testing interrupt of lke show -all\" ; \$gtm_dist/lke\r"
expect "LKE>"
send -- "show -all\r"
expect "Owned by PID="
send -- "\003"
expect "YDB-I-CTRLC, CTRL_C encountered" {set ctrlc [expr $ctrlc + 1]}
expect "LKE>"
send -- "exit\r"

# Exit out of the shell
expect "ctrlc>"
send "exit\r"

# Use expect to count the matched CTRLC message rather than trying to grep them from the log file
puts ""
puts "Verification $status. $ctrlc CTRLC messages were seen (PASS == 5)"
puts ""

# Expect should wait until TCSH exits
expect eof
