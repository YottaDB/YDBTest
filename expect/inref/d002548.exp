#!/usr/bin/expect -f
#################################################################
#								#
# Copyright (c) 2018 YottaDB LLC. and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

#
# This Expect script was generated by autoexpect on Thu Feb 17 11:39:44 2011
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set gtm_verno		[lindex $argv 0]
set gtm_image		[lindex $argv 1]
set gtm_test_ver	[lindex $argv 2]

# MAYBE #########################
# Generic prompt catcher from http://stackoverflow.com/questions/6491351/tcl-expect-regular-expression
# set prompt "(%|#|>|\\\$) $"
# expect -re $prompt
# MAYBE #########################

# BEGIN
# setup must match
set timeout -1
spawn $env(SHELL)
match_max 100000
expect "*"
send -- "set prompt=\"D9F05002548>\"\r"
expect "*"
expect -- "D9F05002548>"
send -- "uname\r"

expect {
	# HPUX is teh stupids
	"HP-UX" {
		send -- "setenv TERM vt320\r"
		expect -- "D9F05002548>"
		send -- "stty erase '^?'\r"
		expect -- "D9F05002548>"
		send -- "stty intr '^c'\r"
		expect -- "D9F05002548>"
		send -- "stty -a\r"
	}
	# stty shows AIX mapping ^H to erase, fix it
	"AIX" {
		send -- "uname -vr\r"
		sleep 1
		expect {
			"1 7" {
                		send -- "stty erase '^?'\r"
			}
			"1 6" {
                		send -- "stty erase '^?'\r"
			}
			"3 5" {
				send -- "setenv TERM screen\n"
				expect -- "D9F05002548>"
        	        	send -- "stty erase '^?'\r"
			}
		}
	}
	"SunOS" {
		send -- "setenv TERMINFO /usr/local/lib/terminfo\r"
		expect -- "D9F05002548>"
		send -- "setenv TERM vt320\r"
		expect -- "D9F05002548>"
		send -- "alias stty /usr/ucb/stty\r"
	}
	"Linux" {send -- "\r"}
}

set timeout 5
#### TEST STARTS HERE ###
expect -- "D9F05002548>"
send -- "$gtm_test_ver/expect/inref/d002548.csh\r"




expect "Input for X: "
send -- "inseft\002\002r\r"
expect "Input for Y : "
send -- "alv\001m\033OC\033OCern\r"
expect "Input for Z : "
send -- "oerstrike\001\033OC\033\[2~v\033\[2~\r"

expect "PASTHRU\r
"
send -- "inseft\002\002r\r"

expect "Input for X: "
send -- "a"
send -- "\033OA\r"
send -- "works"

#echo "do btest^ttyread<ctrl-A><right><right><right>a"
expect "YDB>"
send -- "do btest^ttyread"
send -- "\001\033OC\033OC\033OCa\r"
expect {
	"PASS This is routine ATEST" {puts "\rEXPECT MUMPS PASS\r"}
	"FAIL" {}
	"INVCMD" {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
	"YDB>"   {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
	timeout  {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
}


expect "Input for X: "
send -- "fgf\025asdfgf\r"

expect "Single char input Y: "
send -- "\033OA"
expect "Five Char input Z: "
send -- "bcdf\001a\005e"

expect "Input for X: "
send -- "aple\033OD\033ODp\006\006s"
expect "Input for Y : "
send -- "qwertyu\002\002\013y\r"
expect "Input for Z : "
send -- "b\033OA"

expect "Input for X: "
send -- "inseft\002\002r\r"
expect "Input for Y : "
send -- "alv\001m\033OC\033OCern\r"
expect "Input for Z : "
send -- "oerstrike\001\033OC\033\[2~v\033\[2~\r"

expect "Input for X: "
send -- "testing"
send -- "\001"
send -- "\005"
send -- "\006\006\006\006\006\006\r"

expect "Input for Y : "
send -- "testing\001\033OC\033OC\033OC\r"

expect "Input for Z : "
send -- "\033OA\r"

expect -exact "Input the following: backspace<ctrl A><3 ctrl F><del><ret>\r
"
send -- "backspace\001\006\006\006\r"
expect "Input the following: backspace<ctrl A><3 ctrl F><ctrl H><ret>\r
"
send -- "backspace\001\006\006\006\r"

expect "PASTHRU\r
"
send -- "inseft\002\002r\r"

expect "PASTHRU\r
"
send -- "mystr\002e\005y\r"

expect "Input before<ret> :"
send -- "before\r"
expect "Input for Y :"
send -- "after\r"
expect "Input for Z :"
send -- "\033OA\r"


expect "YDB>"
send -- "do atest^ttyreadin\002\002\013\r"
expect {
	"PASS This is routine ATEST" {puts "\rEXPECT MUMPS PASS\r"}
	"FAIL" {}
	"INVCMD" {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
	"YDB>"   {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
	timeout  {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
}

expect "Input 1234<left> :"
send -- "1234\033\[D"

expect "YDB>"
send -- "so\025do atest^ttyra\033ODe\005d\r"
expect {
	"PASS This is routine ATEST" {puts "\rEXPECT MUMPS PASS\r"}
	"FAIL" {}
	"INVCMD" {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
	"YDB>"   {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
	timeout  {
		puts "\rEXPECT MUMPS FAIL\r"
		send -- "halt\r"
	}
}


#expect "12345678901234567<ctrl-A>a<ctrl-E>b<4 lefts><del>b<ctrl-B><ins>c<ret>"
expect -exact "***"
send -- "12345678901234567\001a\005b\033OD\033OD\033OD\033ODb\002\033\[2~c\r"


expect "Input testing<ret> : "
send -- "testing\r"
expect "Input asdfgf<ctrl-A><Ctrl-F><right><Ctrl-B>\r
"
send -- "asdfgf\001\006\033OC\002"
expect "you typed one of the EDITING Control characters ^B, ^E, ^K\r
"
send -- "\005"
expect "you typed one of the EDITING Control characters ^B, ^E, ^K\r
"
send -- "\013"
expect "you typed one of the EDITING Control characters ^B, ^E, ^K\r
"
send -- "\022"

expect "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:"
send -- "nowrap\r"

expect "GDE>"
send -- "show eg\002\002r\005ion\001\033OC\033OC\033OC\033OC\033OC-\r"
expect {
	"REGION" {puts "\rEXPECT GDE PASS\r"}
	"%GDE-E-" {puts "\rEXPECT GDE FAIL\r"}
}
expect "GDE>"
send -- "we\025quit\r"
expect "GDE-I-NOACTION" {puts "\rEXPECT GDE PASS\r"}

expect "GDE>"
send -- "show -teg\002\033OD\033ODr\005ion\r"
expect {
	"REGION" {puts "\rEXPECT GDE PASS\r"}
	"%GDE-E-" {puts "\rEXPECT GDE FAIL\r"}
}
expect "GDE>"
send -- "we\025wuit\001q\r"
expect "GDE-I-NOACTION" {puts "\rEXPECT GDE PASS\r"}

# in case of failure, we have to wait for the timeout
expect "GDE>"
send -- "quit\001\005\002\r"
expect {
	-re "GDE-E-(ILLCHAR|KEYWRDBAD)"
	{
		puts "\rEXPECT GDE PASS\r"
		send -- "quit\r"
	}
	"GDE-I-NOACTION"
	{
		puts "\rEXPECT GDE FAIL\r"
	}
	-re "GDE-E-\[A-HJL-Z]"
	{
		puts "\rEXPECT GDE FAIL\r"
		send -- "quit\r"
	}
}
expect "GDE-I-NOACTION"

expect "Input asdfg*
"
send -- "asdfg\033\[20~"
expect "Input asdfg*
"
send -- "asdfg\033\[20~\r"
send -- "\r"

expect -- "D9F05002548>"
send -- "exit\r"
expect eof
