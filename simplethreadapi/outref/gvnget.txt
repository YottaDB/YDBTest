# Now run gvnget*.c (all tests driven by a C routine)

 --> Running gvnget0_cb.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
gvngetcb: Generating 3000 variables
gvngetcb: Variables generated - writing them to file gvngetcb-M-extract.txt
gvngetcb: Variables written - driving external call for call-backs via ydb_get_st() in the SimpleThreadAPI
gvngetcb: Entered external call - processing key/value pair file..

gvngetcb: Complete
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.

 --> Running gvnget1_simple.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
### Test simple gets in ydb_get_st() of Global Variables ###
Initialize call-in environment
Set a global variable with 0 subscripts
Set a global variable with 1 subscript
Set a global variable with 2 subscripts
Get the global variable with 0 subscripts
ydb_get_st() returned [A question]
Get the global variable with 1 subscript
ydb_get_st() returned [One less than 43]
Get the global variable with 2 subscripts
ydb_get_st() returned [Life, the universe, and everything]
Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv="A question"
^baselv(42)="One less than 43"
^baselv(42,"answer:")="Life, the universe, and everything"
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.

 --> Running gvnget2_31subs.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
### Test 31-level (max-deep) subscripts can be got using ydb_get_st() of Global Variables ###
Set a global variable with 0 subscripts
ydb_get_st() : subsbuff [0] : ydb_get_st() returned []
Set a global variable with 1 subscripts
ydb_get_st() : subsbuff [1] : ydb_get_st() returned [1]
Set a global variable with 2 subscripts
ydb_get_st() : subsbuff [2] : ydb_get_st() returned []
Set a global variable with 3 subscripts
ydb_get_st() : subsbuff [3] : ydb_get_st() returned [3]
Set a global variable with 4 subscripts
ydb_get_st() : subsbuff [4] : ydb_get_st() returned []
Set a global variable with 5 subscripts
ydb_get_st() : subsbuff [5] : ydb_get_st() returned [5]
Set a global variable with 6 subscripts
ydb_get_st() : subsbuff [6] : ydb_get_st() returned []
Set a global variable with 7 subscripts
ydb_get_st() : subsbuff [7] : ydb_get_st() returned [7]
Set a global variable with 8 subscripts
ydb_get_st() : subsbuff [8] : ydb_get_st() returned []
Set a global variable with 9 subscripts
ydb_get_st() : subsbuff [9] : ydb_get_st() returned [9]
Set a global variable with 10 subscripts
ydb_get_st() : subsbuff [10] : ydb_get_st() returned []
Set a global variable with 11 subscripts
ydb_get_st() : subsbuff [11] : ydb_get_st() returned [11]
Set a global variable with 12 subscripts
ydb_get_st() : subsbuff [12] : ydb_get_st() returned []
Set a global variable with 13 subscripts
ydb_get_st() : subsbuff [13] : ydb_get_st() returned [13]
Set a global variable with 14 subscripts
ydb_get_st() : subsbuff [14] : ydb_get_st() returned []
Set a global variable with 15 subscripts
ydb_get_st() : subsbuff [15] : ydb_get_st() returned [15]
Set a global variable with 16 subscripts
ydb_get_st() : subsbuff [16] : ydb_get_st() returned []
Set a global variable with 17 subscripts
ydb_get_st() : subsbuff [17] : ydb_get_st() returned [17]
Set a global variable with 18 subscripts
ydb_get_st() : subsbuff [18] : ydb_get_st() returned []
Set a global variable with 19 subscripts
ydb_get_st() : subsbuff [19] : ydb_get_st() returned [19]
Set a global variable with 20 subscripts
ydb_get_st() : subsbuff [20] : ydb_get_st() returned []
Set a global variable with 21 subscripts
ydb_get_st() : subsbuff [21] : ydb_get_st() returned [21]
Set a global variable with 22 subscripts
ydb_get_st() : subsbuff [22] : ydb_get_st() returned []
Set a global variable with 23 subscripts
ydb_get_st() : subsbuff [23] : ydb_get_st() returned [23]
Set a global variable with 24 subscripts
ydb_get_st() : subsbuff [24] : ydb_get_st() returned []
Set a global variable with 25 subscripts
ydb_get_st() : subsbuff [25] : ydb_get_st() returned [25]
Set a global variable with 26 subscripts
ydb_get_st() : subsbuff [26] : ydb_get_st() returned []
Set a global variable with 27 subscripts
ydb_get_st() : subsbuff [27] : ydb_get_st() returned [27]
Set a global variable with 28 subscripts
ydb_get_st() : subsbuff [28] : ydb_get_st() returned []
Set a global variable with 29 subscripts
ydb_get_st() : subsbuff [29] : ydb_get_st() returned [29]
Set a global variable with 30 subscripts
ydb_get_st() : subsbuff [30] : ydb_get_st() returned []
Set a global variable with 31 subscripts
ydb_get_st() : subsbuff [31] : ydb_get_st() returned [31]
Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv=""
^baselv(0)=1
^baselv(0,1)=""
^baselv(0,1,2)=3
^baselv(0,1,2,3)=""
^baselv(0,1,2,3,4)=5
^baselv(0,1,2,3,4,5)=""
^baselv(0,1,2,3,4,5,6)=7
^baselv(0,1,2,3,4,5,6,7)=""
^baselv(0,1,2,3,4,5,6,7,8)=9
^baselv(0,1,2,3,4,5,6,7,8,9)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10)=11
^baselv(0,1,2,3,4,5,6,7,8,9,10,11)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12)=13
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)=15
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)=17
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)=19
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)=21
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)=23
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)=25
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)=27
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)=29
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)=31
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.

 --> Running gvnget3_errors.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
### Test error scenarios in ydb_get_st() of Global Variables ###

# Test of INVVARNAME error
Attempting get of bad basevar (% in middle of name) ^B%dbasevarInvChar
ydb_get_st() [54]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name supplied to API call
Attempting get of bad basevar (> 31 characters) ^Verylongbasevarthatexceedsmaxlength
ydb_get_st() [63]: 151027842,(SimpleThreadAPI),%YDB-E-VARNAME2LONG, Variable name length exceeds maximum allowed (31)
Attempting get of bad basevar (first letter in name is digit) ^1namestartswithdigit
ydb_get_st() [72]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name supplied to API call
# Test of MAXNRSUBSCRIPTS error
Attempting get of basevar with 32 subscripts
ydb_get_st() [84]: 150373282,(SimpleThreadAPI),%YDB-E-MAXNRSUBSCRIPTS, Maximum number of subscripts exceeded
# Test of MINNRSUBSCRIPTS error
Attempting get of basevar with -1 subscripts
ydb_get_st() [94]: 151027786,(SimpleThreadAPI),%YDB-E-MINNRSUBSCRIPTS, Number of subscripts cannot be a negative number
# Test of PARAMINVALID error in ret_value parameter
Attempting get with ret_value->buf_addr=NULL when return value is a NULL string : Expect NO PARAMINVALID error
Attempting get with NULL ret_value when return value is a NULL string : Expect PARAMINVALID error
ydb_get_st() [120]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_value parameter specified in ydb_get_st() call
Attempting get with NULL ret_value when return value is a non-NULL string : Expect PARAMINVALID error
ydb_get_st() [135]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_value parameter specified in ydb_get_st() call
Attempting get with ret_value->buf_addr=NULL when return value is a non-NULL string : Expect PARAMINVALID error
ydb_get_st() [145]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_value->buf_addr parameter specified in ydb_get_st() call
# Test of INVSTRLEN error
Attempting get with ret_value->len_alloc=0 : Expect INVSTRLEN error
ydb_get_st() [157]: 150375522,(SimpleThreadAPI),%YDB-E-INVSTRLEN, Invalid string length 10: max 3 : ret_value->len_used = 10 after call
Attempting get with ret_value->len_alloc set to value returned in ret_value->len_used after INVSTRLEN error. Expect NO error
ydb_get_st() returned [A question]
# Test of SUBSARRAYNULL error
Attempting get of basevar with NULL subsarray parameter. Expect SUBSARRAYNULL error
ydb_get_st() [179]: 151027794,(SimpleThreadAPI),%YDB-E-SUBSARRAYNULL, Non-zero number of subscripts [1] specified but subscript array parameter is NULL in ydb_get_st() call
# Test of PARAMINVALID error in subsarray parameter
Attempting get with subsarray[0].len_alloc=0 and subsarray[0].len_used=2 : Expect PARAMINVALID error
ydb_get_st() [194]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_get_st() call
Attempting get with subsarray[0].len_alloc=0 and subsarray[0].len_used=0 : Expect NO PARAMINVALID error
Attempting get with subsarray[0].len_alloc=1 and subsarray[0].len_used=0 : Expect NO PARAMINVALID error
Attempting get with subsarray[0].len_alloc=1 and subsarray[0].len_used=1 : Expect NO PARAMINVALID error
Attempting get with subscr32[0].buf_addr=NULL and subscr32[0].len_used=1 : Expect PARAMINVALID error
ydb_get_st() [255]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_get_st() call
Attempting get with subscr32[0].buf_addr=NULL and subscr32[0].len_used=0 : Expect NO PARAMINVALID error
Attempting get with subsarray[3].len_alloc=0 and subsarray[3].len_used=2 : Expect PARAMINVALID error
ydb_get_st() [194]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 3) parameter specified in ydb_get_st() call
Attempting get with subsarray[3].len_alloc=0 and subsarray[3].len_used=0 : Expect NO PARAMINVALID error
Attempting get with subsarray[3].len_alloc=1 and subsarray[3].len_used=0 : Expect NO PARAMINVALID error
Attempting get with subsarray[3].len_alloc=1 and subsarray[3].len_used=1 : Expect NO PARAMINVALID error
Attempting get with subscr32[3].buf_addr=NULL and subscr32[3].len_used=1 : Expect PARAMINVALID error
ydb_get_st() [255]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 3) parameter specified in ydb_get_st() call
Attempting get with subscr32[3].buf_addr=NULL and subscr32[3].len_used=0 : Expect NO PARAMINVALID error
# Test of GVUNDEF error from ydb_get_st()
ydb_get_st() [282]: 150372994,(SimpleThreadAPI),%YDB-E-GVUNDEF, Global variable undefined: ^baselv("x","x")
# Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv="A question"
^baselv("","x","x","x","x")="A question"
^baselv("x","x","x","","x")="A question"
^baselv("x","x","x","x","x")="A question"
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
