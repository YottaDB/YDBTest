# Test that a nested ydb_tp_st() rolls back correctly when the parent transaction commits
# We also run a version of the test for 10 seconds with multiple threads without output to ensure that YDB_TP_RESTART is handled correctly
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
start Thread 1
Thread T1:Test 1 : Test YDB_TP_ROLLBACK handling
Thread T1:a)	The flow is : CPROGRAM -> ydb_tp_st()1 -> CALLBACK1 -> ydb_tp_st()2 -> CALLBACK2. Here CPROGRAM is the C program which invokes ydb_tp_st(). CALLBACK1 is the user-specified TP callback function at TP depth 1 and CALLBACK2 is the user-specified TP callback function at TP depth 2.
Thread T1:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T1:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T1:CALLBACK2 will return YDB_TP_ROLLBACK
Thread T1:CALLBACK1 will check that the return from ydb_tp_st()2 is actually YDB_TP_ROLLBACK.
Thread T1:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T1:ydb_tp_st()1 returned YDB_OK as expected
Thread T1:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.

Thread T1:Test 2 : Test user-specific-error-code handling
Thread T1:Flow is very similar to Test 1 but instead of returning YDB_TP_ROLLBACK, CALLBACK2 returns a user-specific status code (USER_SPECIFIC_STATUS_CODE).
Thread T1:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T1:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T1:CALLBACK2 will return USER_SPECIFIC_STATUS_CODE
Thread T1:CALLBACK1 will check that the return from ydb_tp_st()2 is actually USER_SPECIFIC_STATUS_CODE.
Thread T1:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T1:ydb_tp_st()1 returned YDB_OK as expected
Thread T1:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.
end Thread 1

start Thread 2
Thread T2:Test 1 : Test YDB_TP_ROLLBACK handling
Thread T2:a)	The flow is : CPROGRAM -> ydb_tp_st()1 -> CALLBACK1 -> ydb_tp_st()2 -> CALLBACK2. Here CPROGRAM is the C program which invokes ydb_tp_st(). CALLBACK1 is the user-specified TP callback function at TP depth 1 and CALLBACK2 is the user-specified TP callback function at TP depth 2.
Thread T2:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T2:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T2:CALLBACK2 will return YDB_TP_ROLLBACK
Thread T2:CALLBACK1 will check that the return from ydb_tp_st()2 is actually YDB_TP_ROLLBACK.
Thread T2:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T2:ydb_tp_st()1 returned YDB_OK as expected
Thread T2:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.

Thread T2:Test 2 : Test user-specific-error-code handling
Thread T2:Flow is very similar to Test 1 but instead of returning YDB_TP_ROLLBACK, CALLBACK2 returns a user-specific status code (USER_SPECIFIC_STATUS_CODE).
Thread T2:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T2:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T2:CALLBACK2 will return USER_SPECIFIC_STATUS_CODE
Thread T2:CALLBACK1 will check that the return from ydb_tp_st()2 is actually USER_SPECIFIC_STATUS_CODE.
Thread T2:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T2:ydb_tp_st()1 returned YDB_OK as expected
Thread T2:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.
end Thread 2

start Thread 3
Thread T3:Test 1 : Test YDB_TP_ROLLBACK handling
Thread T3:a)	The flow is : CPROGRAM -> ydb_tp_st()1 -> CALLBACK1 -> ydb_tp_st()2 -> CALLBACK2. Here CPROGRAM is the C program which invokes ydb_tp_st(). CALLBACK1 is the user-specified TP callback function at TP depth 1 and CALLBACK2 is the user-specified TP callback function at TP depth 2.
Thread T3:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T3:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T3:CALLBACK2 will return YDB_TP_ROLLBACK
Thread T3:CALLBACK1 will check that the return from ydb_tp_st()2 is actually YDB_TP_ROLLBACK.
Thread T3:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T3:ydb_tp_st()1 returned YDB_OK as expected
Thread T3:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.

Thread T3:Test 2 : Test user-specific-error-code handling
Thread T3:Flow is very similar to Test 1 but instead of returning YDB_TP_ROLLBACK, CALLBACK2 returns a user-specific status code (USER_SPECIFIC_STATUS_CODE).
Thread T3:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T3:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T3:CALLBACK2 will return USER_SPECIFIC_STATUS_CODE
Thread T3:CALLBACK1 will check that the return from ydb_tp_st()2 is actually USER_SPECIFIC_STATUS_CODE.
Thread T3:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T3:ydb_tp_st()1 returned YDB_OK as expected
Thread T3:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.
end Thread 3

start Thread 4
Thread T4:Test 1 : Test YDB_TP_ROLLBACK handling
Thread T4:a)	The flow is : CPROGRAM -> ydb_tp_st()1 -> CALLBACK1 -> ydb_tp_st()2 -> CALLBACK2. Here CPROGRAM is the C program which invokes ydb_tp_st(). CALLBACK1 is the user-specified TP callback function at TP depth 1 and CALLBACK2 is the user-specified TP callback function at TP depth 2.
Thread T4:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T4:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T4:CALLBACK2 will return YDB_TP_ROLLBACK
Thread T4:CALLBACK1 will check that the return from ydb_tp_st()2 is actually YDB_TP_ROLLBACK.
Thread T4:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T4:ydb_tp_st()1 returned YDB_OK as expected
Thread T4:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.

Thread T4:Test 2 : Test user-specific-error-code handling
Thread T4:Flow is very similar to Test 1 but instead of returning YDB_TP_ROLLBACK, CALLBACK2 returns a user-specific status code (USER_SPECIFIC_STATUS_CODE).
Thread T4:CALLBACK1 will do some db updates (first set of updates) using ydb_set_st() before calling ydb_tp_st()2 which calls CALLBACK2.
Thread T4:CALLBACK2 will do some db updates (second set of updates) using ydb_set_st()
Thread T4:CALLBACK2 will return USER_SPECIFIC_STATUS_CODE
Thread T4:CALLBACK1 will check that the return from ydb_tp_st()2 is actually USER_SPECIFIC_STATUS_CODE.
Thread T4:Since control has returned from ydb_tp_st()2, CALLBACK1 will do some more updates (third set of updates) using ydb_set_st() then return YDB_OK.
Thread T4:ydb_tp_st()1 returned YDB_OK as expected
Thread T4:Since control has returned from ydb_tp_st()1 CPROGRAM will check that the first and third updates exist in the db but the second update doesn't.
end Thread 4
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
