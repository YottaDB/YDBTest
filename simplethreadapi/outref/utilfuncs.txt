# Test of Utility Functions in the SimpleThreadAPI
# Now run utilfuncs*.c (all tests driven by a C routine)

 --> Running utilfuncs1_message.c <---
### Test Functionality of ydb_message_t() in the SimpleThreadAPI ###

# Test ydb_message_t() with the errnum for YDB_ERR_PARAMINVALID: -151027770
ydb_message_t() returns 
%YDB-E-PARAMINVALID, !AD parameter specified in !AD call

### Test Error scenarios of ydb_message_t() in the SimpleThreadAPI ###
# Test of YDB_ERR_UNKNOWNSYSERR error
Line[70]: 151027906,(SimpleThreadAPI),%YDB-E-UNKNOWNSYSERR, [2147483647] does not correspond to a known YottaDB error code
and msg_buff remains unchanged

# Test of YDB_ERR_INVSTRLEN error
Line[90]: 150375522,(SimpleThreadAPI),%YDB-E-INVSTRLEN, Invalid string length 56: max 5

# Test of YDB_ERR_PARAMINVALID error
# Test with msg_buff->buf_addr = NULL
Line[109]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL msg_buff->buf_addr parameter specified in ydb_message_t() call
# Test with msg_buff = NULL
Line[118]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL msg_buff parameter specified in ydb_message_t() call

 --> Running utilfuncs1_timer.c <---
### Test Functionality of ydb_timer_start_t()/ydb_timer_cancel_t() in the SimpleAPI ###

# Test ydb_timer_set_t() sets a timer which will consequently call a handle function.
# Execute ydb_timer_set_t() with limit_nsec set to 3 seconds
ydb_timer_start_t() successfully called timer_done()
Correct amount of time passed after ydb_timer_start_t()

# Test ydb_timer_cancel_t() cancels a set timer, which prevents the handle function from being called
# Set ydb_timer_cancel_t() to cancel after 1 second
ydb_timer_start_t() successfully cancelled

 --> Running utilfuncs2_CALLINAFTERXIT.c <---
### Test that any SimpleThreadAPI call after ydb_exit() returns YDB_ERR_CALLINAFTERXIT error ###
# Invoke ydb_set_st() to initialize SimpleThreadAPI environment
# Invoke ydb_exit() to shutdown/close SimpleThreadAPI environment
 --> Invoke ydb_data_st()                after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_delete_excl_st()         after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_delete_st()              after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_get_st()                 after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_incr_st()                after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_lock_st()                after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_lock_decr_st()           after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_lock_incr_st()           after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_node_next_st()           after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_node_previous_st()       after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_set_st()                 after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_str2zwr_st()             after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_subscript_next_st()      after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_subscript_previous_st()  after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_tp_st()                  after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_zwr2str_st()             after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_child_init()             after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_ci_t()                   after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_cip_t()                  after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_ci_tab_open_t()          after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_ci_tab_switch_t()        after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_exit()                   after ydb_exit() : Return value is YDB_OK as expected
 --> Invoke ydb_file_id_free_t()         after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_file_is_identical_t()    after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_file_name_to_id_t()      after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_init()                   after ydb_exit() : Return value is -YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_message_t()              after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_stdout_stderr_adjust_t() after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_thread_is_main()         after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_timer_cancel()           after ydb_exit() : There is no return value since function is void
 --> Invoke ydb_timer_start_t()          after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected

 --> Running utilfuncs2_STAPIFORKEXEC.c <---
### Test that any SimpleAPI call in child process after fork() returns YDB_ERR_STAPIFORKEXEC error if exec() isn't used ###
# Invoke ydb_set_st() to initialize SimpleAPI environment
# Fork the process and test SimpleThreadAPI calls
# Inside Child process
 --> Invoke ydb_data_st()                in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_delete_excl_st()         in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_delete_st()              in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_get_st()                 in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_incr_st()                in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_lock_st()                in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_lock_decr_st()           in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_lock_incr_st()           in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_node_next_st()           in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_node_previous_st()       in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_set_st()                 in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_str2zwr_st()             in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_subscript_next_st()      in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_subscript_previous_st()  in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_tp_st()                  in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_zwr2str_st()             in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_child_init()             in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_ci_t()                   in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_cip_t()                  in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_ci_tab_open_t()          in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_ci_tab_switch_t()        in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_exit()                   in the child process after fork() : Return value is YDB_OK as expected
 --> Invoke ydb_file_id_free_t()         in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_file_is_identical_t()    in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_file_name_to_id_t()      in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_init()                   in the child process after fork() : Return value is -YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_message_t()              in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_stdout_stderr_adjust_t() in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_timer_cancel()           in the child process after fork() : There is no return value since function is void
 --> Invoke ydb_timer_start_t()          in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
# Child Process has finished

 --> Running utilfuncs3_MT_CALLINAFTERXIT.c <---
### Test that any SimpleThreadAPI call after ydb_exit() returns YDB_ERR_CALLINAFTERXIT error ###
# Invoke ydb_set_st() to initialize SimpleThreadAPI environment
# Invoke ydb_exit() to shutdown/close SimpleThreadAPI environment
Expected Output:
 --> Invoke ydb_data_st()                after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_delete_excl_st()         after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_delete_st()              after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_get_st()                 after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_incr_st()                after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_lock_st()                after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_lock_decr_st()           after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_lock_incr_st()           after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_node_next_st()           after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_node_previous_st()       after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_set_st()                 after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_str2zwr_st()             after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_subscript_next_st()      after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_subscript_previous_st()  after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_tp_st()                  after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_zwr2str_st()             after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_child_init()             after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_ci_t()                   after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_cip_t()                  after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_ci_tab_open_t()          after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_ci_tab_switch_t()        after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_exit()                   after ydb_exit() : Return value is YDB_OK as expected
 --> Invoke ydb_file_id_free_t()         after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_file_is_identical_t()    after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_file_name_to_id_t()      after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_init()                   after ydb_exit() : Return value is -YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_message_t()              after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_stdout_stderr_adjust_t() after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_thread_is_main()         after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
 --> Invoke ydb_timer_cancel()           after ydb_exit() : There is no return value since function is void
 --> Invoke ydb_timer_start_t()          after ydb_exit() : Return value is YDB_ERR_CALLINAFTERXIT as expected
All 8 Threads returned expected output

 --> Running utilfuncs3_MT_STAPIFORKEXEC.c <---
### Test that any SimpleAPI call in child process after fork() returns YDB_ERR_STAPIFORKEXEC error if exec() isn't used ###
# Invoke ydb_set_st() to initialize SimpleThreadAPI environment
# Within each thread, fork the process and test SimpleThreadAPI calls
Expected Output:
 --> Invoke ydb_data_st()                in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_delete_excl_st()         in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_delete_st()              in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_get_st()                 in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_incr_st()                in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_lock_st()                in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_lock_decr_st()           in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_lock_incr_st()           in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_node_next_st()           in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_node_previous_st()       in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_set_st()                 in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_str2zwr_st()             in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_subscript_next_st()      in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_subscript_previous_st()  in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_tp_st()                  in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_zwr2str_st()             in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_child_init()             in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_ci_t()                   in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_cip_t()                  in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_ci_tab_open_t()          in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_ci_tab_switch_t()        in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_exit()                   in the child process after fork() : Return value is YDB_OK as expected
 --> Invoke ydb_file_id_free_t()         in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_file_is_identical_t()    in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_file_name_to_id_t()      in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_init()                   in the child process after fork() : Return value is -YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_message_t()              in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_stdout_stderr_adjust_t() in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
 --> Invoke ydb_timer_cancel()           in the child process after fork() : There is no return value since function is void
 --> Invoke ydb_timer_start_t()          in the child process after fork() : Return value is YDB_ERR_STAPIFORKEXEC as expected
All 8 Threads returned expected output

 --> Running utilfuncs4_ydb_ci_tab_open_and_ydb_ci_tab_switch.c <---
### Test Functionality of ydb_ci_tab_open_t()/ydb_ci_tab_switch_t() in the SimpleThreadAPI ###

# ydb_ci_tab_switch_t() : Test that passing NULL as new_handle returns YDB_OK if default call-in table file [callin.tab] is not yet open
Got YDB_OK as expected

# Create call-in table files citable1.tab thru citable3.tab
# Create M routines citable1.m thru citable3.m
# Open default call-in table using env var ydb_ci
Got YDB_OK as expected

# Do a ydb_cip_t(citabtest) call now; Will be used to test ydb_cip_t() later
In citabtest^utilfuncs (using call-in table [callin.tab])
Got YDB_OK as expected

# ydb_ci_tab_open_t() : Test of YDB_ERR_PARAMINVALID error for NULL fname
Got YDB_ERR_PARAMINVALID error as expected : ydb_zstatus() returned : 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL fname parameter specified in ydb_ci_tab_open_t() call

# ydb_ci_tab_open_t() : Test of YDB_ERR_PARAMINVALID error for NULL ret_handle
Got YDB_ERR_PARAMINVALID error as expected : ydb_zstatus() returned : 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_handle parameter specified in ydb_ci_tab_open_t() call

# ydb_ci_tab_switch_t() : Test of YDB_ERR_PARAMINVALID error for NULL ret_old_handle
Got YDB_ERR_PARAMINVALID error as expected : ydb_zstatus() returned : 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_old_handle parameter specified in ydb_ci_tab_switch_t() call

# ydb_ci_tab_switch_t() : Test of YDB_ERR_PARAMINVALID error for Invalid new_handle
Got YDB_ERR_PARAMINVALID error as expected : ydb_zstatus() returned : 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid new_handle parameter specified in ydb_ci_tab_switch_t() call

# ydb_ci_tab_open_t() : Test that valid call-in table file citable1.tab returns YDB_OK
Got YDB_OK as expected

# ydb_ci_tab_open_t() : Test that valid call-in table file citable2.tab returns YDB_OK
Got YDB_OK as expected

# ydb_ci_tab_open_t() : Test that valid call-in table file citable3.tab returns YDB_OK
Got YDB_OK as expected

# ydb_ci_tab_open_t() : Test that non-existent call-in table file citable4.tab returns YDB_ERR_CITABOPN
Got YDB_ERR_CITABOPN error as expected : ydb_zstatus() returned : 150379602,(SimpleThreadAPI),%YDB-E-CITABOPN, Unable to open call-in table: citable4.tab,%YDB-E-SYSCALL, Error received from system call fopen -- called from module /Distrib/YottaDB/V998/sr_unix/exttab_parse.c at line 775

# ydb_ci_tab_switch_t() : Test switch to valid call-in table file citable1.tab returns YDB_OK
Got YDB_OK as expected

# Test that ydb_ci_t() call uses call-in table from citable1.tab
Inside M program citable1.m (using call-in table [citable1.tab])
Got YDB_OK as expected

# ydb_ci_tab_switch_t() : Test switch to valid call-in table file citable2.tab returns YDB_OK
Got YDB_OK as expected

# Test that ydb_ci_t() call uses call-in table from citable2.tab
Inside M program citable2.m (using call-in table [citable2.tab])
Got YDB_OK as expected

# ydb_ci_tab_switch_t() : Test switch to valid call-in table file citable3.tab returns YDB_OK
Got YDB_OK as expected

# Test that ydb_ci_t() call uses call-in table from citable3.tab
Inside M program citable3.m (using call-in table [citable3.tab])
Got YDB_OK as expected

# ydb_ci_tab_switch_t() : Test switch to valid call-in table file citable3.tab returns YDB_OK
Got YDB_OK as expected

# Test that ydb_ci_t() call uses call-in table from citable3.tab
Inside M program citable3.m (using call-in table [citable3.tab])
Got YDB_OK as expected

# Test that ydb_cip_t() call with non-zero handle/descriptor is unaffected by ydb_ci_tab_switch()
# That is, ydb_cip_t() still uses the original call-in table and not the currently active call-in table
In citabtest^utilfuncs (using call-in table [callin.tab])
Got YDB_OK as expected

# ydb_ci_tab_switch_t() : Test switch to valid call-in table file citable2.tab returns YDB_OK
Got YDB_OK as expected

# Test that ydb_ci_t() call uses call-in table from citable2.tab
Inside M program citable2.m (using call-in table [citable2.tab])
Got YDB_OK as expected

# Test that ydb_cip_t() call with non-zero handle/descriptor is unaffected by ydb_ci_tab_switch()
# That is, ydb_cip_t() still uses the original call-in table and not the currently active call-in table
In citabtest^utilfuncs (using call-in table [callin.tab])
Got YDB_OK as expected

# ydb_ci_tab_switch_t() : Test switch to valid call-in table file citable1.tab returns YDB_OK
Got YDB_OK as expected

# Test that ydb_ci_t() call uses call-in table from citable1.tab
Inside M program citable1.m (using call-in table [citable1.tab])
Got YDB_OK as expected

# Test that ydb_cip_t() call with non-zero handle/descriptor is unaffected by ydb_ci_tab_switch()
# That is, ydb_cip_t() still uses the original call-in table and not the currently active call-in table
In citabtest^utilfuncs (using call-in table [callin.tab])
Got YDB_OK as expected

# ydb_ci_tab_switch_t() : Test that passing NULL as new_handle returns YDB_OK even if default call-in:table file [callin.tab] has already been opened
Got YDB_OK as expected

# Temporarily rename default call-in table file [callin.tab] as [tmpcallin.tab]
Got 0 return from rename(callin.tab, tmpcallin.tab) as expected

# Test that already open default call-in table is still accessible for ydb_ci_t() calls
In citabtest^utilfuncs (using call-in table [callin.tab])
Got YDB_OK as expected

# Test that ydb_ci_t() calls that rely on non-default call-in table fail when used with default call-in table
Got -YDB_ERR_CINOENTRY error as expected : ydb_zstatus() returned : 150379666,(Call-In),%YDB-E-CINOENTRY, No entry specified for crtnname in the call-in table

# Rename default call-in table file back from [tmpcallin.tab] to [callin.tab]
Got 0 return from rename(tmpcallin.tab, callin.tab) as expected
