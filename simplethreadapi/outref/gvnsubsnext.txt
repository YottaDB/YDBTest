
# Now run gvnsubsnext*.c (all tests driven by a C routine)

 --> Running gvnsubsnext1_simple.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
### Test simple ydb_subscript_next_st() of Global Variables ###
# Initialize call-in environment
# Set a global variable (and a next global variable) with 0 subscripts
# Set global variable node (and a next subscript) with 1 subscript
# Set a global variable node (and a next subscript) with 2 subscripts

# Get next global variable of global variable with 0 subscripts
ydb_subscript_next_st() returned [^nextlv]
# Get next global variable of global variable with 0 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.

# Get next subscript of global variable with 1 subscript
ydb_subscript_next_st() returned [43]
# Get next global variable of global variable with 1 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.

# Get next subscript of global variable with 2 subscripts
ydb_subscript_next_st() returned [answer2]
# Get next global variable of global variable with 2 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.

# Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv="A question"
^baselv(42)="One less than 43"
^baselv(42,"answer")="Life, the universe, and everything"
^baselv(42,"answer2")="Life, the universe, and everything"
^baselv(43)="One less than 43"
^nextlv="A question"
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.

 --> Running gvnsubsnext2_31subs.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
### Test 31-level (max-deep) subscripts can be got using ydb_subscript_next_st() of Global Variables ###

# Set a global variable (and next subscript) with 0 subscripts
ydb_subscript_next_st() : [level 0] returned [^nextlv]
# Get next global variable of global variable with 0 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 1 subscripts
ydb_subscript_next_st() : [level 1] returned [1]
# Get next global variable of global variable with 1 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 2 subscripts
ydb_subscript_next_st() : [level 2] returned [2]
# Get next global variable of global variable with 2 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 3 subscripts
ydb_subscript_next_st() : [level 3] returned [3]
# Get next global variable of global variable with 3 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 4 subscripts
ydb_subscript_next_st() : [level 4] returned [4]
# Get next global variable of global variable with 4 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 5 subscripts
ydb_subscript_next_st() : [level 5] returned [5]
# Get next global variable of global variable with 5 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 6 subscripts
ydb_subscript_next_st() : [level 6] returned [6]
# Get next global variable of global variable with 6 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 7 subscripts
ydb_subscript_next_st() : [level 7] returned [7]
# Get next global variable of global variable with 7 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 8 subscripts
ydb_subscript_next_st() : [level 8] returned [8]
# Get next global variable of global variable with 8 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 9 subscripts
ydb_subscript_next_st() : [level 9] returned [9]
# Get next global variable of global variable with 9 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 10 subscripts
ydb_subscript_next_st() : [level 10] returned [10]
# Get next global variable of global variable with 10 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 11 subscripts
ydb_subscript_next_st() : [level 11] returned [11]
# Get next global variable of global variable with 11 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 12 subscripts
ydb_subscript_next_st() : [level 12] returned [12]
# Get next global variable of global variable with 12 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 13 subscripts
ydb_subscript_next_st() : [level 13] returned [13]
# Get next global variable of global variable with 13 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 14 subscripts
ydb_subscript_next_st() : [level 14] returned [14]
# Get next global variable of global variable with 14 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 15 subscripts
ydb_subscript_next_st() : [level 15] returned [15]
# Get next global variable of global variable with 15 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 16 subscripts
ydb_subscript_next_st() : [level 16] returned [16]
# Get next global variable of global variable with 16 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 17 subscripts
ydb_subscript_next_st() : [level 17] returned [17]
# Get next global variable of global variable with 17 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 18 subscripts
ydb_subscript_next_st() : [level 18] returned [18]
# Get next global variable of global variable with 18 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 19 subscripts
ydb_subscript_next_st() : [level 19] returned [19]
# Get next global variable of global variable with 19 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 20 subscripts
ydb_subscript_next_st() : [level 20] returned [20]
# Get next global variable of global variable with 20 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 21 subscripts
ydb_subscript_next_st() : [level 21] returned [21]
# Get next global variable of global variable with 21 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 22 subscripts
ydb_subscript_next_st() : [level 22] returned [22]
# Get next global variable of global variable with 22 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 23 subscripts
ydb_subscript_next_st() : [level 23] returned [23]
# Get next global variable of global variable with 23 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 24 subscripts
ydb_subscript_next_st() : [level 24] returned [24]
# Get next global variable of global variable with 24 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 25 subscripts
ydb_subscript_next_st() : [level 25] returned [25]
# Get next global variable of global variable with 25 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 26 subscripts
ydb_subscript_next_st() : [level 26] returned [26]
# Get next global variable of global variable with 26 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 27 subscripts
ydb_subscript_next_st() : [level 27] returned [27]
# Get next global variable of global variable with 27 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 28 subscripts
ydb_subscript_next_st() : [level 28] returned [28]
# Get next global variable of global variable with 28 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 29 subscripts
ydb_subscript_next_st() : [level 29] returned [29]
# Get next global variable of global variable with 29 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 30 subscripts
ydb_subscript_next_st() : [level 30] returned [30]
# Get next global variable of global variable with 30 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.
# Set a global variable (and next subscript) with 31 subscripts
ydb_subscript_next_st() : [level 31] returned [31]
# Get next global variable of global variable with 31 subscripts
ydb_subscript_next_st() returned YDB_ERR_NODEEND
*ret_value.len_used and ret_value.buf_addr were unaltered.

# Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv=""
^baselv(0)=1
^baselv(0,1)=""
^baselv(0,1,2)=3
^baselv(0,1,2,3)=""
^baselv(0,1,2,3,4)=5
^baselv(0,1,2,3,4,5)=""
^baselv(0,1,2,3,4,5,6)=7
^baselv(0,1,2,3,4,5,6,7)=""
^baselv(0,1,2,3,4,5,6,7,8)=9
^baselv(0,1,2,3,4,5,6,7,8,9)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10)=11
^baselv(0,1,2,3,4,5,6,7,8,9,10,11)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12)=13
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)=15
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)=17
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)=19
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)=21
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)=23
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)=25
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)=27
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)=29
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)=31
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31)=31
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30)=30
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29)=29
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28)=28
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27)=27
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26)=26
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25)=25
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24)=24
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23)=23
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22)=22
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21)=21
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20)=20
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19)=19
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18)=18
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17)=17
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16)=16
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,15)=15
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,14)=14
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,13)=13
^baselv(0,1,2,3,4,5,6,7,8,9,10,12)=12
^baselv(0,1,2,3,4,5,6,7,8,9,11)=11
^baselv(0,1,2,3,4,5,6,7,8,10)=10
^baselv(0,1,2,3,4,5,6,7,9)=9
^baselv(0,1,2,3,4,5,6,8)=8
^baselv(0,1,2,3,4,5,7)=7
^baselv(0,1,2,3,4,6)=6
^baselv(0,1,2,3,5)=5
^baselv(0,1,2,4)=4
^baselv(0,1,3)=3
^baselv(0,2)=2
^baselv(1)=1
^nextlv=0
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.

 --> Running gvnsubsnext3_errors.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
### Test error scenarios in ydb_subscript_next_st() of Global Variables ###

# Test of INVVARNAME error
# Attempting ydb_subscript_next_st() of bad basevar (% in middle of name) ^B%dbasevarInvChar
ydb_subscript_next_st() [56]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name supplied to API call
# Attempting ydb_subscript_next_st() of bad basevar (> 31 characters) ^Verylongbasevarthatexceedsmaxlength
ydb_subscript_next_st() [65]: 151027842,(SimpleThreadAPI),%YDB-E-VARNAME2LONG, Variable name length exceeds maximum allowed (31)
# Attempting ydb_subscript_next_st() of bad basevar (first letter in name is digit) ^1namestartswithdigit
ydb_subscript_next_st() [74]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name supplied to API call

# Test of MAXNRSUBSCRIPTS error
# Attempting ydb_subscript_next_st() of basevar with 32 subscripts
ydb_subscript_next_st() [86]: 150373282,(SimpleThreadAPI),%YDB-E-MAXNRSUBSCRIPTS, Maximum number of subscripts exceeded

# Test of MINNRSUBSCRIPTS error
# Attempting ydb_subscript_next_st() of basevar with -1 subscripts
ydb_subscript_next_st() [96]: 151027786,(SimpleThreadAPI),%YDB-E-MINNRSUBSCRIPTS, Number of subscripts cannot be a negative number

# Test of PARAMINVALID error in ret_value parameter
# Attempting ydb_subscript_next_st() with ret_value->buf_addr=NULL when return value is a NULL string : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with NULL ret_value when return value is a NULL string : Expect PARAMINVALID error
ydb_subscript_next_st() [122]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_value parameter specified in ydb_subscript_next_st() call
# Attempting ydb_subscript_next_st() with NULL ret_value when return value is a non-NULL string : Expect PARAMINVALID error
ydb_subscript_next_st() [137]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_value parameter specified in ydb_subscript_next_st() call
# Attempting ydb_subscript_next_st() with ret_value->buf_addr=NULL when return value is a non-NULL string : Expect PARAMINVALID error
ydb_subscript_next_st() [147]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, NULL ret_value->buf_addr parameter specified in ydb_subscript_next_st() call

# Test of INVSTRLEN error
# Attempting ydb_subscript_next_st() with ret_value->len_alloc=0 : Expect INVSTRLEN error
ydb_subscript_next_st() [159]: 150375522,(SimpleThreadAPI),%YDB-E-INVSTRLEN, Invalid string length 7: max 4 : ret_value->len_used = 7 after call
# Attempting ydb_subscript_next_st() with ret_value->len_alloc set to value returned in ret_value->len_used after INVSTRLEN error. Expect NO error
ydb_subscript_next_st() returned [^baselv]

# Test of SUBSARRAYNULL error
# Attempting ydb_subscript_next_st() of basevar with NULL subsarray parameter. Expect SUBSARRAYNULL error
ydb_subscript_next_st() [181]: 151027794,(SimpleThreadAPI),%YDB-E-SUBSARRAYNULL, Non-zero number of subscripts [1] specified but subscript array parameter is NULL in ydb_subscript_next_st() call

# Test of PARAMINVALID error in subsarray parameter
# Attempting ydb_subscript_next_st() with subsarray[0].len_alloc=0 and subsarray[0].len_used=2 : Expect PARAMINVALID error
ydb_subscript_next_st() [196]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_subscript_next_st() call
# Attempting ydb_subscript_next_st() with subsarray[0].len_alloc=0 and subsarray[0].len_used=0 : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with subsarray[0].len_alloc=1 and subsarray[0].len_used=0 : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with subsarray[0].len_alloc=1 and subsarray[0].len_used=1 : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with subscr32[0].buf_addr=NULL and subscr32[0].len_used=1 : Expect PARAMINVALID error
ydb_subscript_next_st() [260]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_subscript_next_st() call
# Attempting ydb_subscript_next_st() with subscr32[0].buf_addr=NULL and subscr32[0].len_used=0 : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with subsarray[3].len_alloc=0 and subsarray[3].len_used=2 : Expect PARAMINVALID error
ydb_subscript_next_st() [196]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 3) parameter specified in ydb_subscript_next_st() call
# Attempting ydb_subscript_next_st() with subsarray[3].len_alloc=0 and subsarray[3].len_used=0 : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with subsarray[3].len_alloc=1 and subsarray[3].len_used=0 : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with subsarray[3].len_alloc=1 and subsarray[3].len_used=1 : Expect NO PARAMINVALID error
# Attempting ydb_subscript_next_st() with subscr32[3].buf_addr=NULL and subscr32[3].len_used=1 : Expect PARAMINVALID error
ydb_subscript_next_st() [260]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 3) parameter specified in ydb_subscript_next_st() call
# Attempting ydb_subscript_next_st() with subscr32[3].buf_addr=NULL and subscr32[3].len_used=0 : Expect NO PARAMINVALID error

# Test that GVUNDEF error is NOT issued by ydb_subscript_next_st()
ydb_subscript_next_st() returned YDB_ERR_NODEEND
# Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv="A question"
^baselv("","x","x","x","x")=""
^baselv("x","x","x","","x")=""
^baselv("x","x","x","x","x")=""
##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
