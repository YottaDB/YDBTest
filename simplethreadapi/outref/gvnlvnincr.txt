# Copy all C files that need to be tested
# Now run gvnlvnincr*.c (all tests driven by a C routine)
 --> Running gvnlvnincr1_simple.c for Global Variables <---
### Test data return in ydb_incr_st() of Global Variables ###

# Test ydb_incr_st() on ^X, which is not initially set.
# Check to make sure ^X is not set
ydb_get_st() [73]: Return value : Expected = -150372994 (YDB_ERR_GVUNDEF) : Actual = -150372994
# ydb_incr_st() will set the value of ^X to 0, and then perform the increment.
# *increment is set to NULL, which defaults to 1
# Get ^X to confirm the value has incremented.
ydb_get_st() returns 1

# Test ydb_incr_st() with *increment set to 3
# Get ^X to confirm the value has incremented.
ydb_get_st() returns 4

# Test ydb_incr_st() with *increment set to -1
# Get ^X to confirm the value has decremented.
ydb_get_st() returns 3

# Test ydb_incr_st() with *increment set to -4 in order to decrement to a negative value
# Get ^X to confirm the value has decremented.
ydb_get_st() returns -1

# Set the value of ^X to EFGH
# Test ydb_incr_st() when the value of ^X is EFGH, which should be treated as 0, incrementing by 1
# Get ^X to confirm the value has incremented
ydb_get_st() returns 1

# Test ydb_incr_st() with *increment set to ABCD, which should be treated as 0
# Get ^X to confirm the value has not incremented.
ydb_get_st() returns 1

# Set the value of ^X to 6ABC
# Test ydb_incr_st() when the value of ^X is 6ABC, and *increment is set to 2ABC
# Get ^X to confirm the value has incremented.
ydb_get_st() returns 8

# Set the value of ^X to 6ABC
# Test ydb_incr_st() when the value of ^X is 6ABC, and *increment set to -2ABC
# Get ^X to confirm the value has decremented.
ydb_get_st() returns 4

# Set the value of ^X to -6ABC
# Test ydb_incr_st() when the value of ^X is -6ABC, and *increment set to 2ABC
# Get ^X to confirm the value has incremented.
ydb_get_st() returns -4

# Set the value of ^X to -6ABC
# Test ydb_incr_st() when the value of ^X is -6ABC, and *increment set to -2ABC
# Get ^X to confirm the value has decremented.
ydb_get_st() returns -8

 --> Running gvnlvnincr2_31subs.c for Global Variables <---
### Test 31-level (max-deep) subscripts can be used while using ydb_incr_st() of Global Variables ###
# Each variable will be initially set to 1, and then incremented by 2 to result in 3
# Set a Global variable with 0 subscripts to 1
# Increment ^X() by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 1 subscripts to 1
# Increment ^X(0) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 2 subscripts to 1
# Increment ^X(0,1) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 3 subscripts to 1
# Increment ^X(0,1,2) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 4 subscripts to 1
# Increment ^X(0,1,2,3) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 5 subscripts to 1
# Increment ^X(0,1,2,3,4) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 6 subscripts to 1
# Increment ^X(0,1,2,3,4,5) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 7 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 8 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 9 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 10 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 11 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 12 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 13 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 14 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 15 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 16 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 17 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 18 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 19 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 20 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 21 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 22 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 23 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 24 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 25 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 26 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 27 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 28 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 29 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 30 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Global variable with 31 subscripts to 1
# Increment ^X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3

 --> Running gvnlvnincr3_errors.c for Global Variables <---
### Test error scenarios in ydb_incr_st() of Global Variables ###

# Test of INVVARNAME error
# Attemping ydb_incr_st() of bad basevar (% in middle of name): ^B%dbasevarInvChar
ydb_incr_st() [91]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name "^B%dbasevarInvChar" supplied to API call
# Attemping ydb_incr_st() of bad basevar (first letter in name is digit): ^1namestartswithdigit
ydb_incr_st() [99]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name "^1namestartswithdigit" supplied to API call

# Test of VARNAME2LONG error
# Attemping ydb_incr_st() of bad basevar (> 31 characters): ^Verylongbasevarthatexceedsmaxlength
ydb_incr_st() [108]: 151027842,(SimpleThreadAPI),%YDB-E-VARNAME2LONG, Variable name length exceeds maximum allowed (31)

# Test of MAXNRSUBSCRIPTS error
# Attempting ydb_incr_st() of basevar with 32 subscripts
ydb_incr_st() [119]: 150373282,(SimpleThreadAPI),%YDB-E-MAXNRSUBSCRIPTS, Maximum number of subscripts exceeded

# Test of MINNRSUBSCRIPTS error
# Attemtpin ydb_incr_st() of basevar with -1 subscripts
ydb_incr_st() [128]: 151027786,(SimpleThreadAPI),%YDB-E-MINNRSUBSCRIPTS, Number of subscripts cannot be a negative number

# Test of INVSTRLEN error
# Set the variable ^X to 9 so it will increment from a 1 digit to 2 digits
# Attempting ydb_incr_st() when ret_value->len_alloc is insufficient
ydb_incr_st() [146]: 150375522,(SimpleThreadAPI),%YDB-E-INVSTRLEN, Invalid string length 2: max 1

# Test of PARAMINVALID error
# Attempting ydb_incr_st() with *subsarray->len_alloc < *subsarray->len_used
ydb_incr_st() [156]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_incr_st() call
# Attempting ydb_incr_st() with *increment->len_alloc < *increment->len_used
ydb_incr_st() [166]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid increment parameter specified in ydb_incr_st() call
# Attempting ydb_incr_st() with *subsarray->buf_addr set to NULL, and *subsarray->len_used is non-zero
ydb_incr_st() [176]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_incr_st() call
# Attempting ydb_incr_st() with *increment->buf_addr set to NULL, and *increment->len_used is non-zero
ydb_incr_st() [185]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid increment parameter specified in ydb_incr_st() call

# Test of NUMOFLOW error
# Set ^Y to 9E46
# Attempting ydb_incr_st() on ^Y, incrementing by 1E46, resulting in a numerical overflow
ydb_incr_st() [204]: 150373506,(SimpleThreadAPI),%YDB-E-NUMOFLOW, Numeric overflow
# Get the value of ^Y to confirm is has not changed
The value of ^Y is unchanged

# Test of SUBSARRAYNULL error
# Attempting ydb_incr_st() with *subsarray = NULL
ydb_incr_st() [229]: 151027794,(SimpleThreadAPI),%YDB-E-SUBSARRAYNULL, Non-zero number of subscripts [1] specified but subscript array parameter is NULL in ydb_incr_st() call

# Now run gvnlvnincr*.c (all tests driven by a C routine)
 --> Running gvnlvnincr1_simple.c for Local Variables <---
### Test data return in ydb_incr_st() of Local Variables ###

# Test ydb_incr_st() on X, which is not initially set.
# Check to make sure X is not set
ydb_get_st() [75]: Return value : Expected = -150373850 (YDB_ERR_LVUNDEF) : Actual = -150373850
# ydb_incr_st() will set the value of X to 0, and then perform the increment.
# *increment is set to NULL, which defaults to 1
# Get X to confirm the value has incremented.
ydb_get_st() returns 1

# Test ydb_incr_st() with *increment set to 3
# Get X to confirm the value has incremented.
ydb_get_st() returns 4

# Test ydb_incr_st() with *increment set to -1
# Get X to confirm the value has decremented.
ydb_get_st() returns 3

# Test ydb_incr_st() with *increment set to -4 in order to decrement to a negative value
# Get X to confirm the value has decremented.
ydb_get_st() returns -1

# Set the value of X to EFGH
# Test ydb_incr_st() when the value of X is EFGH, which should be treated as 0, incrementing by 1
# Get X to confirm the value has incremented
ydb_get_st() returns 1

# Test ydb_incr_st() with *increment set to ABCD, which should be treated as 0
# Get X to confirm the value has not incremented.
ydb_get_st() returns 1

# Set the value of X to 6ABC
# Test ydb_incr_st() when the value of X is 6ABC, and *increment is set to 2ABC
# Get X to confirm the value has incremented.
ydb_get_st() returns 8

# Set the value of X to 6ABC
# Test ydb_incr_st() when the value of X is 6ABC, and *increment set to -2ABC
# Get X to confirm the value has decremented.
ydb_get_st() returns 4

# Set the value of X to -6ABC
# Test ydb_incr_st() when the value of X is -6ABC, and *increment set to 2ABC
# Get X to confirm the value has incremented.
ydb_get_st() returns -4

# Set the value of X to -6ABC
# Test ydb_incr_st() when the value of X is -6ABC, and *increment set to -2ABC
# Get X to confirm the value has decremented.
ydb_get_st() returns -8

 --> Running gvnlvnincr2_31subs.c for Local Variables <---
### Test 31-level (max-deep) subscripts can be used while using ydb_incr_st() of Local Variables ###
# Each variable will be initially set to 1, and then incremented by 2 to result in 3
# Set a Local variable with 0 subscripts to 1
# Increment X() by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 1 subscripts to 1
# Increment X(0) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 2 subscripts to 1
# Increment X(0,1) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 3 subscripts to 1
# Increment X(0,1,2) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 4 subscripts to 1
# Increment X(0,1,2,3) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 5 subscripts to 1
# Increment X(0,1,2,3,4) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 6 subscripts to 1
# Increment X(0,1,2,3,4,5) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 7 subscripts to 1
# Increment X(0,1,2,3,4,5,6) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 8 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 9 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 10 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 11 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 12 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 13 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 14 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 15 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 16 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 17 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 18 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 19 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 20 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 21 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 22 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 23 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 24 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 25 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 26 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 27 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 28 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 29 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 30 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3
# Set a Local variable with 31 subscripts to 1
# Increment X(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30) by 1
# To confirm the value has incremented, get the new value
ydb_get_st() returns 3

 --> Running gvnlvnincr3_errors.c for Local Variables <---
### Test error scenarios in ydb_incr_st() of Local Variables ###

# Test of INVVARNAME error
# Attemping ydb_incr_st() of bad basevar (% in middle of name): B%dbasevarInvChar
ydb_incr_st() [91]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name "B%dbasevarInvChar" supplied to API call
# Attemping ydb_incr_st() of bad basevar (first letter in name is digit): 1namestartswithdigit
ydb_incr_st() [99]: 151027762,(SimpleThreadAPI),%YDB-E-INVVARNAME, Invalid local/global/ISV variable name "1namestartswithdigit" supplied to API call

# Test of VARNAME2LONG error
# Attemping ydb_incr_st() of bad basevar (> 31 characters): Verylongbasevarthatexceedsmaxlength
ydb_incr_st() [108]: 151027842,(SimpleThreadAPI),%YDB-E-VARNAME2LONG, Variable name length exceeds maximum allowed (31)

# Test of MAXNRSUBSCRIPTS error
# Attempting ydb_incr_st() of basevar with 32 subscripts
ydb_incr_st() [119]: 150373282,(SimpleThreadAPI),%YDB-E-MAXNRSUBSCRIPTS, Maximum number of subscripts exceeded

# Test of MINNRSUBSCRIPTS error
# Attemtpin ydb_incr_st() of basevar with -1 subscripts
ydb_incr_st() [128]: 151027786,(SimpleThreadAPI),%YDB-E-MINNRSUBSCRIPTS, Number of subscripts cannot be a negative number

# Test of INVSTRLEN error
# Set the variable X to 9 so it will increment from a 1 digit to 2 digits
# Attempting ydb_incr_st() when ret_value->len_alloc is insufficient
ydb_incr_st() [146]: 150375522,(SimpleThreadAPI),%YDB-E-INVSTRLEN, Invalid string length 2: max 1

# Test of PARAMINVALID error
# Attempting ydb_incr_st() with *subsarray->len_alloc < *subsarray->len_used
ydb_incr_st() [156]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_incr_st() call
# Attempting ydb_incr_st() with *increment->len_alloc < *increment->len_used
ydb_incr_st() [166]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid increment parameter specified in ydb_incr_st() call
# Attempting ydb_incr_st() with *subsarray->buf_addr set to NULL, and *subsarray->len_used is non-zero
ydb_incr_st() [176]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid subsarray (index 0) parameter specified in ydb_incr_st() call
# Attempting ydb_incr_st() with *increment->buf_addr set to NULL, and *increment->len_used is non-zero
ydb_incr_st() [185]: 151027770,(SimpleThreadAPI),%YDB-E-PARAMINVALID, Invalid increment parameter specified in ydb_incr_st() call

# Test of NUMOFLOW error
# Set Y to 9E46
# Attempting ydb_incr_st() on Y, incrementing by 1E46, resulting in a numerical overflow
ydb_incr_st() [204]: 150373506,(SimpleThreadAPI),%YDB-E-NUMOFLOW, Numeric overflow
# Get the value of Y to confirm is has not changed
The value of Y is unchanged

# Test of SUBSARRAYNULL error
# Attempting ydb_incr_st() with *subsarray = NULL
ydb_incr_st() [229]: 151027794,(SimpleThreadAPI),%YDB-E-SUBSARRAYNULL, Non-zero number of subscripts [1] specified but subscript array parameter is NULL in ydb_incr_st() call

