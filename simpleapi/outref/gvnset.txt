Copy all C programs that need to be tested
 --> Running gvnset1_simple.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
# Test simple sets in ydb_set_s() of Global Variables
Initialize call-in environment
Set a global variable with 0 subscripts
Set a global variable with 1 subscript
Set a global variable with 2 subscripts
Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv="A question"
^baselv(42)="One less than 43"
^baselv(42,"answer:")="Life, the universe, and everything"

##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
 --> Running gvnset2_31subs.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
# Test 31-level (max-deep) subscripts can be set using ydb_set_s() of Global Variables
# Also test that passing in a NULL value results in null string value
Set a global variable with 0 subscripts
Set a global variable with 1 subscripts
Set a global variable with 2 subscripts
Set a global variable with 3 subscripts
Set a global variable with 4 subscripts
Set a global variable with 5 subscripts
Set a global variable with 6 subscripts
Set a global variable with 7 subscripts
Set a global variable with 8 subscripts
Set a global variable with 9 subscripts
Set a global variable with 10 subscripts
Set a global variable with 11 subscripts
Set a global variable with 12 subscripts
Set a global variable with 13 subscripts
Set a global variable with 14 subscripts
Set a global variable with 15 subscripts
Set a global variable with 16 subscripts
Set a global variable with 17 subscripts
Set a global variable with 18 subscripts
Set a global variable with 19 subscripts
Set a global variable with 20 subscripts
Set a global variable with 21 subscripts
Set a global variable with 22 subscripts
Set a global variable with 23 subscripts
Set a global variable with 24 subscripts
Set a global variable with 25 subscripts
Set a global variable with 26 subscripts
Set a global variable with 27 subscripts
Set a global variable with 28 subscripts
Set a global variable with 29 subscripts
Set a global variable with 30 subscripts
Set a global variable with 31 subscripts
Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv=""
^baselv(0)=1
^baselv(0,1)=""
^baselv(0,1,2)=3
^baselv(0,1,2,3)=""
^baselv(0,1,2,3,4)=5
^baselv(0,1,2,3,4,5)=""
^baselv(0,1,2,3,4,5,6)=7
^baselv(0,1,2,3,4,5,6,7)=""
^baselv(0,1,2,3,4,5,6,7,8)=9
^baselv(0,1,2,3,4,5,6,7,8,9)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10)=11
^baselv(0,1,2,3,4,5,6,7,8,9,10,11)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12)=13
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)=15
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)=17
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)=19
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)=21
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)=23
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)=25
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)=27
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)=29
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)=""
^baselv(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)=31

##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
 --> Running gvnset3_errors.c <---
Files Created in ##TEST_PATH##:
Using: ##SOURCE_PATH##/mumps -run GDE
mumps.gld
Using: ##SOURCE_PATH##/mupip
mumps.dat
# Test error scenarios in ydb_set_s() of Global Variables
Attempting set of bad basevar (% in middle of name) ^B%dbasevarInvChar
ydb_set_s() [a]: 151027738,%YDB-E-VARNAMEINVALID, Invalid local/global/ISV variable name supplied to API call
Attempting set of bad basevar (> 31 characters) ^Verylongbasevarthatexceedsmaxlength
ydb_set_s() [b]: 151027738,%YDB-E-VARNAMEINVALID, Invalid local/global/ISV variable name supplied to API call
Attempting set of bad basevar (first letter in name is digit) ^1namestartswithdigit
ydb_set_s() [c]: 151027738,%YDB-E-VARNAMEINVALID, Invalid local/global/ISV variable name supplied to API call
Attempting set of basevar with NULL subscript address parameter where basevar is undefined
ydb_set_s() [d]: 151027778,%YDB-E-SUBSARRAYNULL, Non-zero number of subscripts [1] specified but subscript array parameter is NULL
Attempting set of basevar with NULL subscript address parameter where basevar is defined
ydb_set_s() [d]: 151027778,%YDB-E-SUBSARRAYNULL, Non-zero number of subscripts [1] specified but subscript array parameter is NULL
Attempting set of basevar with 32 subscripts
ydb_set_s() [e]: 150373282,%GTM-E-MAXNRSUBSCRIPTS, Maximum number of subscripts exceeded
Attempting set of basevar with -1 subscripts
ydb_set_s() [f]: 151027770,%YDB-E-MINNRSUBSCRIPTS, Number of subscripts cannot be a negative number
Attempting set with value->len_alloc == 0
ydb_set_s() [g]: 151027746,%YDB-E-YDBBUFFTINVALID, Invalid ydb_buffer_t structure specified in ydb_set_s() call
Attempting set with value->buf_addr == NULL
ydb_set_s() [h]: 151027746,%YDB-E-YDBBUFFTINVALID, Invalid ydb_buffer_t structure specified in ydb_set_s() call
Demonstrate our progress by executing a gvnZWRITE in a call-in
^baselv="A question"

##SOURCE_PATH##/mupip
##SOURCE_PATH##/mupip integ -REG *
No errors detected by integ.
