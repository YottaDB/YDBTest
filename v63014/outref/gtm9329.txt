
# GTM-9329 - verify two subissues for this issue:
#   1. Disabling the current (expired) timeout from within the timeout code works properly - previously to loop (dbg only)
#   2. Trying to assign an invalid code vector should not replace the current working vector - previously left blank
##SUSPEND_OUTPUT PRO

# Drive subissue1^gtm9329 test routine for 1st subissue

# Subissue1: Set a timeout for 2 seconds from now, then try to disable the ztimeout. The
#            white box case that was enabled will cause the clearing of the ztimeout to wait
#            for 4 seconds so the timer for that ztimeout can pop. The signal popping in this
#            window was what previous caused the ztimeout to loop in earlier versions.

# Setup our ztimeout (expect tracing from white box case).

$ZTIMEOUT set - now cause it to unset with whitebox case WBTEST_ZTIM_EDGE setup
Ztimeout expired, setting xfer handlers
ztimeout_set: Set the xfer entries for ztimeout
Sleep over
ztimeout_clear_timer: Resetting the xfer entries for ztimeout
ztimcode: Entering via $ztimeout
ztimcode: Leaving..

Subissue1: completed
##ALLOW_OUTPUT PRO

# Drive subissue2^gtm9329 test routine for 2nd subissue
##TEST_AWK\$ZTIMEOUT before attempting to set an invalid code vector: .*:do ztimcode
Got expected error from attempted compile of bad $ZTIMEOUT code
##TEST_AWK\$ZTIMEOUT after attempting to set an invalid code vector: .*:do ztimcode

Subissue2: succeeded
