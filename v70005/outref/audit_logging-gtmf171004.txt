# *****************************************************************
# GTM-F171004 - Test the following release note
# *****************************************************************
#
# Release note http://tinco.pair.com/bhaskar/gtm/doc/articles/GTM_V7.0-005_Release_Notes.html#GTM-F171004 says:
#
# > GT.M audit logging facilities use tty to label the standard
# > input of the process. GT.M places tty=ttyname before the
# > command field in all audit log messages. If the standard input
# > at process startup is not terminal device, GT.M logs tty=0. In
# > addition, the audit facilities check for errors at the time of
# > closing a socket / terminating a connection and report them
# > with a GTM-E-SOCKCLOSE message to the operator log. The audit
# > logger/listener sample programs (downloadable from the A&O
# > Guide) switch their log files after receiving a SIGHUP signal.
# > The switched log file has a suffix "_%Y%j%H%M%S"
# > (yearjuliendayhoursminutesseconds) and the naming convention
# > is similar to what GT.M uses for switching journal files. FIS
# > recommends periodically switching logger files. Deleting an
# > active audit log file makes it lost to new processes, while
# > existing processes continue to use it, so FIS recommends
# > taking such a step. The sample programs have a Makefile.
# >
# > Previously, the audit log facilities did not provide tty
# > information, did not check and report on errors during socket
# > close, the logger/listener programs did not implement a log
# > file switching mechanism, and those programs had no Makefile.
# > (GTM-F171004)
#
# Originally, there were separate sample programs for different
# connection methods: TCP, TCP+TLS and Unix Socket. At YottaDB,
# we've merged them into a single one. The differences are:
# - connection method can now be selected using a CLI arg,
# - as it's a single C source file, no Makefile is needed,
# - removed redundant code (signal handling).
#
# Besides these trivial changes, we've added a small feature: the
# program now saves a text file including own PID, filename can
# be specified as CLI arg.
#
# All other behaviours and the rest of the program code are
# unchanged. The modified code is available at
# com/audit_listener.c in the YDBTest repository. Compile
# and usage documentation can be found at com/audit_listener.md.
#
# Notice:
#  Modified com/auditlogfilter.m, the tty (field 7) is now not
#  completely masked out:
#  - if it's "0" (means STDIN is not a terminal), it's masked as
#    other fields
#  - else only numbers are masked (pty device index)
#
# GTM-E-SOCKCLOSE is not tested, it needs to interrupt the
# client exactly when it sends the log message, which is not
# reasonably feasible without white-box testing.
#
# ---- startup ----
# prepare read-write $gtm_dist directory
# compile audit_listener utility
# allocate port number for TCP and TLS connections
# set-up crypt config file for section clicert
# get group ID for restrict.txt
# launch tcp audit_listener
# wait for pidfile

# ---- connection: tcp, reset_log: no, input: pipe ----
# setup restrict.txt: audit logging with tcp
# no log reset, append result to existing file
# log message: DSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# no log reset, append result to existing file
# log message: ISM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# no log reset, append result to existing file
# log message: MSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: tcp, reset_log: no, input: terminal ----
# setup restrict.txt: audit logging with tcp
# no log reset, append result to existing file
# log message: DSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# no log reset, append result to existing file
# log message: ISM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# no log reset, append result to existing file
# log message: MSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: tcp, reset_log: yes, input: pipe ----
# setup restrict.txt: audit logging with tcp
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: DSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: ISM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: MSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: tcp, reset_log: yes, input: terminal ----
# setup restrict.txt: audit logging with tcp
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: DSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: ISM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tcp
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: MSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# stop audit_listener and wait for finish
# launch tls audit_listener
# wait for pidfile

# ---- connection: tls, reset_log: no, input: pipe ----
# setup restrict.txt: audit logging with tls
# no log reset, append result to existing file
# log message: DSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# no log reset, append result to existing file
# log message: ISM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# no log reset, append result to existing file
# log message: MSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: tls, reset_log: no, input: terminal ----
# setup restrict.txt: audit logging with tls
# no log reset, append result to existing file
# log message: DSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# no log reset, append result to existing file
# log message: ISM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# no log reset, append result to existing file
# log message: MSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: tls, reset_log: yes, input: pipe ----
# setup restrict.txt: audit logging with tls
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: DSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: ISM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: MSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: tls, reset_log: yes, input: terminal ----
# setup restrict.txt: audit logging with tls
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: DSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: ISM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with tls
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: MSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# stop audit_listener and wait for finish
# launch unix_socket audit_listener
# wait for pidfile

# ---- connection: unix_socket, reset_log: no, input: pipe ----
# setup restrict.txt: audit logging with unix_socket
# no log reset, append result to existing file
# log message: DSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# no log reset, append result to existing file
# log message: ISM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# no log reset, append result to existing file
# log message: MSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: unix_socket, reset_log: no, input: terminal ----
# setup restrict.txt: audit logging with unix_socket
# no log reset, append result to existing file
# log message: DSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# no log reset, append result to existing file
# log message: ISM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# no log reset, append result to existing file
# log message: MSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: unix_socket, reset_log: yes, input: pipe ----
# setup restrict.txt: audit logging with unix_socket
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: DSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: ISM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: MSM
# display audit log file (last entry should include: tty=0 - means STDIN is not a terminal)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass

# ---- connection: unix_socket, reset_log: yes, input: terminal ----
# setup restrict.txt: audit logging with unix_socket
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: DSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=DSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: ISM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=ISM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# setup restrict.txt: audit logging with unix_socket
# delete previous archived log files
# reset log by sending SIGHUP to the audit listener
log rotate done
# check rotated log filename
filename check: pass
# log message: MSM
# display audit log file (last entry should include: tty=/dev/pty/<masked>)
<timestamp_masked>; dist=<masked>; src=4; uid=<masked>; euid=<masked>; pid=<masked>; tty=<masked>; command=MSM
# check if log timestamp falls between before-after checkpoints
stamp check: pass
# stop audit_listener and wait for finish

# ---- cleanup ----
# release port number
